<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2617 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY UMA PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/Home">
<!ENTITY UMAreqs PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/UMA+Requirements">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4627 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
]>
<rfc category="std" docName="draft-maler-oauth-umatrust-00a" ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='4' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <front>
    <title abbrev="UMA Core Protocol">Binding Obligations on User-Managed
    Access (UMA) Participants</title>

    <author fullname="Eve Maler" initials="E" role="editor" surname="Maler">
      <organization>XMLgrrl.com</organization>

      <address>
        <email>eve@xmlgrrl.com</email>
      </address>
    </author>

    <date day="9" month="May" year="2012" />

    <abstract>
      <t>The User-Managed Access (UMA) core protocol provides a method for
      users to control access to their protected resources, residing on any
      number of host sites, through an authorization manager that governs
      access decisions based on user policy. This specification provides a
      contractual framework that defines the minimum obligations of entities
      that operate and use software that claims to conform to the UMA
      protocol. The overall goal of this specification is to support legal
      enforceability of any agreements made between the authorizing and
      requesting sides using UMA. The audience for this specification includes
      technologists, legal professionals, and operators of UMA-conforming
      services.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>The User-Managed Access (UMA) core protocol <xref
      target="UMAcore"></xref> provides a method for users to control access
      to their protected resources, residing on any number of host sites,
      through an authorization manager that governs access decisions based on
      user policy. This specification provides a contractual framework that
      defines the minimum obligations of entities that operate and use
      software that claims to conform to the UMA protocol. The overall goal of
      this framework is to support legal enforceability of any agreements made
      between the authorizing and requesting sides using UMA. The audience for
      this specification includes technologists, legal professionals, and
      operators of UMA-conforming services.</t>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"></xref>.</t>
      </section>

      <section title="Sharing Constellations">
        <t>UMA makes possible an end-to-end access sharing relationship
        between an Authorizing Party and a Requesting Party, with its primary
        goals being to constrain access according to the Authorizing Party's
        access policies and to require the Requesting Party to adhere to any
        obligations it consented to in the authorization process. Following
        are sample use cases that explore the potential differences in these
        obligations. Each constellation's requirements for successful
        user-managed access may be distinct.<list style="hanging">
            <t hangText="Person-to-self sharing">This describes most types of
            today's OAuth-mediated access, for example, when Alice introduces
            the Klout service to her Twitter account. She uses both services
            herself, and wants them to communicate together on her behalf.
            Alice is both the Authorizing Party and the Requesting Party. In
            this circumstance, it's unlikely Alice will want to impose
            stringent contract terms on herself.</t>

            <t hangText="Person-to-person sharing">Today, many Web 2.0 sites
            offer some level of this control, but methods, strengths, and
            interfaces are inconsistent between sites and we're not able to
            reuse policies across sites. For example, Alice can share Flickr
            photos with Bob by adding him to her Flickr "friends" or "family"
            list or by mailing him a special link to a photo album. Or Alice
            can add Bob as a "friend" on Facebook. Alice is the Authorizing
            Party and Bob is the Requesting Party.</t>

            <t hangText="Mediated person-to-organization sharing">For example,
            Alice wants to give her dentist's office, DentalCare, temporary
            access to her calendar, to make it easier to schedule a series of
            root canal appointments. Carl, the office assistant, might be the
            actual person acting on behalf of the dental practice who sees
            Alice's calendar. Alice is the Authorizing Party, DentalCare is
            the Requesting Party, and Carl is the Requesting Party Agent. In
            this circumstance, Alice may require Carl to prove he is acting on
            behalf of DentalCare.</t>

            <t hangText="Autonomous person-to-organization sharing">For
            example, Alice has crafted a "personal request for proposals"
            (known as a pRFP among the Vendor Relationship Management
            community) because she's in the market for a new car, and she's
            willing to let car dealerships in her region of the country see
            the RFP and make her offers. Different car dealerships might use
            Web crawler services to go out and collect such RFPs, and these
            services will have to prove in automated fashion that they
            legitimately represent the right kind of business. Alice is the
            Authorizing Party and each dealership is a Requesting Party. In
            this circumstance, it makes no sense for an AM or Host to present
            a browser-interaction interface to each Requester since no human
            is sitting behind the latter.</t>
          </list></t>
      </section>

      <section title="How to Use the Contractual Framework">
        <t>Contracts or laws that bind Entities that take part in UMA-based
        interactions MUST reuse, or incorporate by reference, the entirety of
        <xref target="clauses"></xref>. It forms the minimum set of
        obligations that these Entities MUST accept in order to use UMA. The
        Entities MAY adopt additional obligations, and MAY further refine or
        constrain the obligations listed here, but MUST NOT make these minimum
        obligations less strict. See <xref
        target="terminology-clauses"></xref> for definitions of the
        capitalized terms and the abbreviations used in this introductory
        section.</t>

        <t>Each clause takes the following form: "[Clause ID]. When [protocol
        interaction takes place], the [obligated party] gains an obligation to
        the [expecting party] to [behave in a particular way]." The clause ID
        uses the abbreviations T, R, RO, H, AM, and AP respectively for the
        Terminology, Requesting Party, Requester Operator, Host Operator, AM
        Operator, and Authorizing Party. Clauses are sometimes followed by
        non-normative explanatory comments, which are labeled with
        "Comments:".</t>

        <t>The Authorizing Party, AM Operator, Host Operator, and Requesting
        Party Entities take on binding obligations by interacting with the
        others using software that claims to be UMA-conforming. These
        obligations come as a result of specific protocol interactions.
        Following are the key interactions that result in obligations, along
        with references to the relevant sections in <xref
        target="UMAcore"></xref> that define these interactions:<list
            style="symbols">
            <t>A Host responds to a Requester's access request: Section 3.</t>

            <t>An AM issues a protection API token (PAT) to a Host: Section
            2.3.</t>

            <t>An AM issues an authorization API token (AAT) to a Requester:
            Section 3.4.3.</t>

            <t>An AM issues a requester permission token (RPT) to a Requester:
            Section 3.4.4.</t>

            <t>An AM grants a permission to a Requesting Party with a 201
            response: Section 3.4.4.</t>

            <t>A Host checks the status of an RPT: Section 3.3.</t>

            <t>A Host registers a permission on behalf of a Requester: Section
            3.2.</t>

            <t>A Requester supplies claims to an AM: Section 3.5.</t>

            <t>A Requester successfully receives access: Section 3.1.3.</t>
          </list></t>
      </section>

      <section title="Obligations Not in the Scope of the Contractual Framework">
        <t>Requesting Party Agents have no UMA-dictated obligations, though
        they might have obligations as part of contractual agreements with
        other UMA-related Entities, for example, pairwise contracts or
        membership in trust frameworks. Additionally, Entities that are
        directly UMA-related might have obligations between themselves apart
        from the ones specified here. Following are some typical
        examples:<list style="symbols">
            <t>A Host Operator relies on an Authorizing Party to adhere to its
            terms of service (TOS) at the moment the latter initially
            registers for an account at the Host service of the former.</t>

            <t>An AM Operator relies on a Requester Operator, apart from any
            particular Requesting Party's usage of that web app, to adhere to
            the AM Operator's TOS for application programming interface (API)
            clients when the client app developer registers for client
            credentials or through "API-wrap" TOS.</t>

            <t>A Requesting Party relies on its employee to act as its
            Requesting Party Agent when the employee signs an employment
            agreement. The Authorizing Party's policy might require the
            Requesting Party to prove that the request is being mediated by a
            legitimate agent for that Entity. However, the Requesting Party
            itself is the one who might impose constraints on its workforce
            around keeping information learned in the course of business
            confidential, etc.</t>

            <t>A Requesting Party relies on a Requester Operator to adhere to
            any contractual agreement governing that service. For example, a
            car dealership may contract out to use a cloud service that crawls
            the Web looking for personal RFPs that meet the dealership's
            criteria.</t>

            <t>A Requester Operator relies on a Host Operator to be a
            trustworthy Entity for sourcing data controlled by a particular
            Authorizing Party. For example, in a scenario where the Requesting
            Party is also the Authorizing Party and is trying to fill in an
            online loan application through a financial service (the
            Requester), where the Host Operator provides credit risk data
            about the Authorizing User, the financial service Requester will
            want to authenticate the Host service in some fashion.</t>
          </list></t>
      </section>
    </section>

    <section anchor="clauses" title="Binding Obligations on UMA Participants">
      <section anchor="terminology-clauses" title="Terminology">
        <t></t>

        <t><spanx style="strong">T1.</spanx> This specification uses the
        following terms. Where terms are used without capitalization and are
        not otherwise defined in the <xref target="UMAcore"></xref>, they are
        used in their normal sense.<list hangIndent="6" style="hanging">
            <t hangText="Entity"><vspace />A natural person (that is, a human
            being) or a legal person (such as a corporation) with the legal
            capacity to take on contractual duties and obligations as a
            participant in an UMA interaction. Entities play various roles in
            achieving and seeking user-managed access, and the same Entity
            might serve in multiple contractual roles.</t>

            <t hangText="Conformance"><vspace />Claimed or objectively tested
            compliance of a running software program or service with the
            requirements of the UMA core protocol, as defined in its
            specification. Software components play various roles in
            participating in the technical interactions necessary to achieve
            and seek user-managed access, and the same software component
            might serve in multiple technical roles.</t>

            <t hangText="Authorizing Party"><vspace />An Entity in the
            conceptual role of the "user" in "User-Managed Access", typically
            but not exclusively a natural person, which uses and configures
            software services that fill the AM and Host roles in the UMA core
            protocol.</t>

            <t hangText="Authorization Manager (AM)"><vspace />A software
            service that fills the "authorization manager (AM)" role as
            defined in the UMA core protocol.</t>

            <t hangText="Authorization Manager (AM) Operator"><vspace />An
            Entity responsible for running and operating an AM.</t>

            <t hangText="Host"><vspace />A software service that fills the
            "host" role as defined in the UMA core protocol.</t>

            <t hangText="Host Operator"><vspace />An Entity responsible for
            running and operating a Host.</t>

            <t hangText="Requester"><vspace />A software application or
            service that fills the "requester" role as defined in the UMA core
            protocol.</t>

            <t hangText="Requester Operator"><vspace />An Entity responsible
            for running and operating a Requester.</t>

            <t hangText="Requesting Party"><vspace />An Entity, either a
            natural or a legal person, which uses a Requester to seek access
            to a protected resource. The Requesting Party and the Authorizing
            Party may be the same Entity or different Entities.</t>

            <t hangText="Requesting Party Agent"><vspace />An Entity,
            typically a natural person acting on behalf of a legal person,
            which uses a Requester to seek access to a protected resource on
            behalf of a Requesting Party.</t>
          </list></t>

        <t>Comments: The <xref target="UETA"></xref> defines two terms that
        are particularly relevant to understanding the interactions among UMA
        participants:<list style="symbols">
            <t>"'Automated transaction' means a transaction conducted or
            performed, in whole or in part, by electronic means or electronic
            records, in which the acts or records of one or both parties are
            not reviewed by an individual in the ordinary course in forming a
            contract, performing under an existing contract, or fulfilling an
            obligation required by the transaction."</t>

            <t>"'Electronic agent' means a computer program or an electronic
            or other automated means used independently to initiate an action
            or respond to electronic records or performances in whole or in
            part, without review or action by an individual."</t>
          </list>Where a Requester is used by a human Requesting Party or a
        human Requesting Party Agent, at times human-computer interaction
        (HCI) will be required, but otherwise the access-attempt transaction
        is likely to be fully automatic from the perspective of the
        "requesting side". Furthermore, where the Authorizing Party and the
        Requesting Party are the same natural person, or where the Authorizing
        Party has set a policy that requires real-time approval through some
        out-of-band method, this person can expect to engage in HCI. Otherwise
        the access-attempt transaction is likely to be fully automatic from
        the perspective of the "authorizing side" because the access attempt
        is made without any requirement for the Authorizing Party to be
        present at run time.</t>

        <t><spanx style="strong">T2.</spanx> This specification uses the
        following abbreviations.<list style="hanging">
            <t hangText="AAT">"Authorization API token", as defined in the UMA
            core protocol.</t>

            <t hangText="PAT">"Protection API token", as defined in the UMA
            core protocol.</t>

            <t hangText="RPT">Requester permission token", as defined in the
            UMA core protocol.</t>

            <t hangText="UMA">"User-Managed Access", the interoperability
            technology defined by the UMA core protocol and the other
            specifications it includes by reference (including this
            specification).</t>
          </list></t>
      </section>

      <section title="Obligations of the Requesting Party">
        <t><spanx style="strong">R1.</spanx> When the Requester successfully
        receives access from a Host to a protected resource by wielding a
        valid requester permission token with a currently valid permission for
        the type of access sought, the Requesting Party gains a) an obligation
        to the Authorizing Party to adhere to promises it made in order to get
        access authorization granted, and b) a further obligation to the
        Authorizing Party not to further delegate a wider scope of access
        rights to the same resource to other Entities than the Requesting
        Party itself was authorized for.</t>

        <t>Comments: Previously, the requesting party asked for the permission
        from the AM and might have had to provide claims asserting willingness
        to adhere to data usage constraints imposed by the user. This is
        precisely the end-to-end access authorization agreement that UMA
        exists to forge. Accepting access to the protected resource binds the
        Requesting Party to the terms it agreed to, for example, only reading
        the resource rather than modifying it, or selling the data it contains
        if it agreed not to. Further, the restriction on scope of access is an
        attempt to put "chain-link confidentiality" (and other chain-linked
        constraints) into effect, as discussed in <xref
        target="ChainLink"></xref>.</t>

        <t><spanx style="strong">R2.</spanx> When the AM issues an
        authorization API token to a Requester, the Requesting Party gains an
        obligation to the AM Operator to truthfully supply any self-asserted
        claims required for access authorization at this AM.</t>

        <t>Comments: Later, the Requesting Party might be asked to provide
        claims to support authorization processes at this AM, for accessing
        all resources protected by this AM, managed by any Authorizing
        Parties.The Requesting Party's responsibility to provide truthful
        claims in all these cases begins now. The Requesting Party can remove
        this duty by revoking the AAT.</t>

        <t><spanx style="strong">R3.</spanx> When the Requesting Party
        provides claims to an AM to satisfy the AM's authorization process,
        the Requesting Party gains an obligation to the AM Operator to
        truthfully supply any claims required for access authorization for the
        requested permission.</t>

        <t>Comments: Where claims are supplied that can be verified by the AM,
        the risk imposed by this need for "trust" can be reduced. Note that
        UMA defines an "OpenID Connect claim profile" that provides one way to
        collect trusted claims from third-party claim providers.</t>

        <t><spanx style="strong">R4.</spanx> When the AM issues a requester
        permission token to a Requester, the Requesting Party using that
        Requester gains an obligation to the Host Operator to represent the
        legitimate bearer of the requester permission token whenever it
        presents this token to the Host.</t>

        <t>Comments: In the case where the "bearer" UMA token profile is being
        used, the token cannot be bound in any meaningful way to the Entity to
        which it was originally issued, so the Requesting Party takes on the
        duty of protecting and not maliciously sharing the RPT. This is a
        recommended area of exploration for additional UMA token profiles that
        can effect higher levels of technical trust in order to rely less on
        business trust. For example, a new UMA token profile could mitigate
        this risk by using digital signatures to test the putative requesting
        party's right to possess the token.</t>
      </section>

      <section title="Obligations of the Requester Operator">
        <t><spanx style="strong">RO1.</spanx> When the Requester successfully
        receives access from a Host to a protected resource by wielding a
        valid requester permission token with a currently valid permission for
        the type of access sought, the Requester Operator gains an obligation
        to the Requesting Party to adhere to all existing obligations it has
        to the Requesting Party regarding data access, transformation,
        storage, and usage that it performs on the Requesting Party's
        behalf.</t>

        <t>Comments: The intent is for there to be no "leakage"; UMA should
        not enable a Requester Operator to handle information in a manner that
        is outside the scope of what has been previously agreed to with the
        Requesting Party, in the context of the Requesting Party's contract to
        use the Requester. This obligation is intended to put "chain-link
        confidentiality" (and other chain-linked constraints) into effect, as
        discussed in <xref target="ChainLink"></xref>.</t>
      </section>

      <section title="Obligations of the Host Operator">
        <t><spanx style="strong">H1.</spanx> When the AM issues a protection
        API token to the Host, the Host Operator gains an obligation to the
        Authorizing Party to outsource authorization to the AM Operator for
        the set of protectable resources for which it advertised this
        capability to the Authorizing Party, and to respect the access
        constraints represented by the permissions generated by the AM.</t>

        <t>Comments: Once the AM Operator becomes the Authorizing Party's
        authorization proxy, it begins relying on the Host Operator in other,
        more specific ways. The Host has the opportunity to inspect
        permissions later, but its responsibility for respecting them begins
        now. The Authorizing Party can remove this duty by revoking the PAT.
        When it is possible in OAuth to perform token revocation, the Host
        Operator can remove this duty itself by revoking the PAT.</t>

        <t><spanx style="strong">H2.</spanx> When the AM issues a protection
        API token to the Host, the Host Operator gains an obligation to the AM
        Operator to register resource sets and applicable actions accurately
        and timely according to the Authorizing Party&rsquo;s wishes for
        protection.</t>

        <t>Comments: The Host has the opportunity to register resource sets
        later, but its responsibility for performing this task begins now. The
        Authorizing Party can remove this duty by revoking the PAT. When it is
        possible in OAuth to perform token revocation, the Host Operator can
        remove this duty itself by revoking the PAT.</t>

        <t><spanx style="strong">H3.</spanx> When the Host checks the status
        of a requester permision token, the Host Operator gains an obligation
        to the AM Operator to respect the status of permissions granted by the
        AM in allowing or disallowing access by the Requester.</t>

        <t>Comments: The Host Operator, as an Entity that is otherwise
        potentially not obligated to the AM Operator at all, carries a great
        deal of responsibility here not to allow access where the AM has not
        granted permission and to make every effort to grant access where the
        AM has granted permission. Its interpretation of scopes and
        permissions is not directly auditable by the AM. Further, issues can
        arise from the skew between permission validity periods and actual
        access. This is a recommended area of exploration for additional UMA
        token profiles that can effect higher levels of technical trust in
        order to rely less on business trust.</t>

        <t><spanx style="strong">H4.</spanx> When the Host responds in any
        fashion to a Requester's access request, the Host Operator gains an
        obligation to the Requesting Party to give accurate access to the
        protected resource according to whether the Requesting Party has
        permission to do so.</t>

        <t>Comments: The Host Operator, as an Entity that is otherwise
        potentially not obligated to the AM Operator at all, carries a great
        deal of responsibility here to make every effort to grant access where
        the AM has granted permission. Its interpretation of scopes and
        permissions is not directly auditable by the requester or AM. Further,
        issues can arise from the skew between permission validity periods and
        actual access. This is a recommended area of exploration for
        additional UMA token profiles that can effect higher levels of
        technical trust in order to rely less on business trust.</t>
      </section>

      <section title="Obligations of the AM Operator">
        <t><spanx style="strong">AM1.</spanx> When the AM issues a protection
        API token to the Host, the AM Operator gains an obligation to the
        Authorizing Party to collaborate with the Host Operator in protecting
        the user's resources managed at this Host.</t>

        <t>Comments: Later, the AM will require the Host to present the PAT
        whenever it uses the AM&rsquo;s protection API on behalf of this
        Authorizing Party. The Authorizing Party can remove this duty by
        revoking the PAT. When it is possible in OAuth to perform token
        revocation, the Host Operator can remove this duty itself by revoking
        the PAT.</t>

        <t><spanx style="strong">AM2.</spanx> When the Host registers a
        permission at the AM, the AM Operator gains an obligation to the Host
        Operator to represent the user&rsquo;s authorization policies
        accurately and timely the permissions it has granted.</t>

        <t>Comments: Later, when a Requester approaches the AM seeking that
        permission, the AM matches user policies to the requested permission
        to drive any requests for claims and its ultimate authorization
        decision, but its responsibility for performing this task begins
        now.</t>

        <t><spanx style="strong">AM3.</spanx> When the AM issues an
        authorization API token to a Requester, the AM Operator gains an
        obligation to the Requesting Party to request only claims that support
        the purpose of satisfying the user's policy.</t>

        <t>Comments: Later, the AM might ask the requesting party to provide
        claims for specific permission purposes, but its responsibility begins
        now. The Requesting Party can remove this duty by revoking the AAT.
        When it is possible in OAuth to perform token revocation, the
        Requester Operator can remove this duty itself by revoking the
        AAT.</t>
      </section>

      <section title="Obligations of the Authorizing Party">
        <t><spanx style="strong">AP1.</spanx> When the AM grants a Requester a
        permission, the Authorizing Party gains an obligation to the
        Requesting Party to respect the boundaries of data usage constraints
        placed on the Requesting Party in the form of requests for promissory
        claims driven by the Authorizing Party's policy at the AM.</t>

        <t>Comments: For example, the Authorizing User cannot subsequently
        protest or sue the Requesting Party for resale of the user&rsquo;s
        data if this was allowed by the terms of the granted permission.</t>

        <t><spanx style="strong">AP1.</spanx> When the AM issues a protection
        API token to the Host, the Authorizing Party gains an obligation to
        the AM Operator to introduce the desired Host to this AM in
        outsourcing protection of this host's resources.</t>

        <t>Comments: How the Host learned of the AM's location is out of band
        for UMA; it is the Authorizing Party's responsibility to check that it
        has been redirected to an acceptable AM before the AM successfully
        issues the PAT. The Authorizing Party can remove this obligation by
        revoking the PAT.</t>

        <t><spanx style="strong">AP3.</spanx> When the AM issues a protection
        API token to the Host, the Authorizing Party gains an obligation to
        the Host Operator to introduce the desired AM to this Host in
        outsourcing protection of this host's resources.</t>

        <t>Comments: Once the AM Operator becomes the Authorizing
        Party&rsquo;s authorization proxy, the Host Operator begins relying on
        it in other, more specific ways. How the Authorizing Party indicated
        the desired AM to the host is out of band for UMA; it is the
        Authorizing Party's responsibility to check that it has been
        redirected to an acceptable AM before the AM successfully issues the
        PAT. The Authorizing Party can remove this obligation by revoking the
        PAT.</t>
      </section>
    </section>

    <section title="Issues">
      <t>Following are open issues on this specification.<list style="numbers">
          <t>When we finish revising Section 3.4.x around the RPT and
          permission endpoints, we should be sure to check and revise the
          mention of "An AM grants a permission to a Requesting Party with a
          201 response: Section 3.4.4." as required.</t>

          <t>Is there reason to define Authorizing Party Agent (parallel with
          Requesting Party Agent) for enterprise UMA case cases where the user
          is acting on behalf of their company?</t>
        </list></t>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The current editor of this specification is Eve Maler of XMLgrrl.com.
      The following people are co-authors:<list style="symbols">
          <t>Domenico Catalano, Oracle Corp.</t>

          <t>Kevin Cox, Edentiti</t>

          <t>Sal D'Agostino, IDmachines</t>

          <t>Susan Morrow, Avoco Secure</t>
        </list></t>

      <t>Additional contributors to this specification include the Kantara UMA
      Work Group participants, a list of whom can be found at <xref
      target="UMAnitarians"></xref>. The co-authors and contributors thank
      Scott David, Dazza Greenwood, and Tom Smedinghoff for offering their
      legal expertise and insight in the preparation of this
      specification.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>

      <reference anchor="UMAcore"
                 target="http://docs.kantarainitiative.org/uma/draft-uma-core.html">
        <front>
          <title>User-Managed Access (UMA) Core Protocol</title>

          <author initials="T." surname="Hardjono">
            <organization>MIT</organization>
          </author>

          <date day="30" month="April" year="2012" />
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <reference anchor="UMAnitarians"
                 target="http://kantarainitiative.org/confluence/display/uma/Participant+Roster">
        <front>
          <title>UMA Participant Roster</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date year="2012" />
        </front>
      </reference>

      <reference anchor="UETA"
                 target="http://www.law.upenn.edu/bll/archives/ulc/fnact99/1990s/ueta99.htm">
        <front>
          <title>Uniform Electronic Transactions Act</title>

          <author initials="T." surname="Smedinghoff">
            <organization>National Conference of Commissioners on Uniform
            State Laws</organization>
          </author>

          <date year="1999" />
        </front>
      </reference>

      <reference anchor="ChainLink"
                 target="http://cyberlaw.stanford.edu/publications/chain-link-confidentiality">
        <front>
          <title>Chain-Link Confidentiality</title>

          <author initials="W." surname="Hartzog">
            <organization>The Center for Internet and Society</organization>
          </author>

          <date day="24" month="April" year="2012" />
        </front>
      </reference>
    </references>

    <section anchor="History" title="Document History">
      <t>NOTE: To be removed by RFC editor before publication as an RFC.</t>
    </section>
  </back>
</rfc>
