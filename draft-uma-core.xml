<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2617 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY UMA PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/Home">
<!ENTITY UMAreqs PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/UMA+Requirements">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4627 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
]>
<rfc category="std" docName="draft-hardjono-oauth-umacore-05"
     ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='4' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <front>
    <title abbrev="UMA Core Protocol">User-Managed Access (UMA) Core
    Protocol</title>

    <author fullname="Thomas Hardjono" initials="T" role="editor"
            surname="Hardjono">
      <organization>MIT</organization>

      <address>
        <email>hardjono@mit.edu</email>
      </address>
    </author>

    <date day="1" month="October" year="2012"/>

    <abstract>
      <t>This specification defines the User-Managed Access (UMA) core
      protocol. This protocol provides a method for users to control access to
      their protected resources, residing on any number of host sites, through
      an authorization manager that governs access decisions based on user
      policy.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>The User-Managed Access (UMA) core protocol provides a method based
      on OAuth 2.0 <xref target="OAuth2"/> for users to control access to
      their protected resources, residing on any number of host sites, through
      a single authorization manager (AM) that governs access decisions based
      on user policy.</t>

      <t>There are numerous use cases for UMA, where a resource owner elects
      to have a third party to control access to these resources potentially
      without the real-time presence of the resource owner. A typical example
      is the following: a web user (authorizing user) can authorize a web app
      (requester) to gain one-time or ongoing access to a resource containing
      his home address stored at a "personal data store" service (host), by
      telling the host to act on access decisions made by his authorization
      decision-making service (authorization manager or AM). The requesting
      party might be an e-commerce company whose site is acting on behalf of
      the user himself to assist him/her in arranging for shipping a purchased
      item, or it might be his friend who is using an online address book
      service to collect addresses, or it might be a survey company that uses
      an online service to compile population demographics. Other scenarios
      and use cases for UMA usage can be found in <xref
      target="UMA-usecases"/> and <xref target="UMA-userstories"/>.</t>

      <t>Practical control of access among loosely coupled parties requires
      more than just messaging protocols. This specification defines only the
      technical "contract" between UMA-compliant entities; its companion Trust
      Model specification <xref target="UMA-trustmodel"/> defines the expected
      behaviors of parties operating and using these entities. Parties
      operating entities that claim to be UMA-compliant MUST provide
      documentation affirmatively stating their acceptance of the binding
      obligations contractual framework defined in the Trust Model
      specification.</t>

      <t>In enterprise settings, application access management often involves
      letting back-office applications serve only as policy enforcement points
      (PEPs), depending entirely on access decisions coming from a central
      policy decision point (PDP) to govern the access they give to
      requesters. This separation eases auditing and allows policy
      administration to scale in several dimensions. UMA makes use of a
      separation similar to this, letting the authorizing user serve as a
      policy administrator crafting authorization strategies on his or her own
      behalf.</t>

      <t>The UMA protocol can be considered an advanced application of <xref
      target="OAuth2"/> in that it profiles, extends, and embeds OAuth in
      various ways. In the big picture, an AM can be thought of as an enhanced
      OAuth authorization server; a host as an enhanced resource server; and a
      requester as an enhanced client, acquiring an access token and the
      requisite authorization to access a protected resource at the host.</t>

      <t>The UMA protocol has three broad phases, as shown in <xref
      target="UMA-phases"/>.</t>

      <figure align="center" anchor="UMA-phases">
        <preamble>The Three Phases of the UMA Protocol</preamble>

        <artwork align="left"><![CDATA[                                   +-----+----------------+
                                   | UA  |  authorizing   |
               +-------Manage (A)--|     |      user      |
               |                   +-----+----------------+
               |   Phase 1:              |       UA       |
               |   protect a             +----------------+
               |   resource                      |
               |                            Control (B)
               |                                 |
               v                                 v
        +-----------+              +-----+----------------+
        |   host    |<-Protect-(C)-|prot | authorization  |
        |           |              | API |  manager (AM)  |
        +-----------+              +-----+----------------+
        | protected |                    | authorization  |
        | resource  |                    |      API       |
        +-----------+                    +----------------+
               ^                                 |
               |   Phases 2 and 3:         Authorize (D)
               |   get authz and                 |
               |   access a resource             v
               |                         +----------------+
               +-------Access (E)--------|   requester    |
                                         +----------------+
                                         (requesting party)]]></artwork>
      </figure>

      <t>In broad strokes, the phases are as follows:<list style="numbers">
          <t>Protect a resource (described in <xref
          target="protecting-a-resource"/>).</t>

          <t>Get authorization (described in <xref
          target="getting-authz-accessing-resource"/>).</t>

          <t>Access a resource (described along with Phase 2 in <xref
          target="getting-authz-accessing-resource"/>).</t>
        </list></t>

      <t>In more detail, the phases work as follows: <list style="numbers">
          <t><spanx>Protect a resource:</spanx> The authorizing user has
          chosen to use a host for managing online resources ("A"), and
          introduces this host to an AM using an OAuth-mediated interaction
          that results in the AM giving the host a protection API token (PAT).
          The host uses AM's protection API to tell the AM what sets of
          resources to protect ("C"). Out of band of the UMA protocol, the
          authorizing user instructs the AM what policies to attach to the
          registered resource sets ("B"). Requesters are not yet in the
          picture.</t>

          <t><spanx>Get authorization:</spanx> This phase involves the
          requester (along with its operator, the requesting party or that
          party's human agent), host, and AM. It may also involve synchronous
          action by the authorizing user if this person is the same person as
          the requesting party. This phase is dominated by a loop of activity
          in which the requester approaches the host seeking access to a
          protected resource ("E"). In order to access the protected resource
          at the host, the requester must obtain a requester permission token
          (RPT) from the AM. The requester is then directed to the AM ask for
          authorization for the permissions it seeks. In doing so, it must
          demonstrate to the AM that it satisfies the resource owner's
          authorization policy governing the sought-for resource and scope of
          access if it does not already have the required access permission
          ("D"). To use the AM's authorization API in the first place, the
          requesting party has to consent to deal with the AM in providing
          claims, which results in the requester obtaining an authorization
          API token (AAT) from the AM.</t>

          <t><spanx>Access a resource:</spanx> This phase involves the
          requester successfully presenting an RPT that has sufficient
          permission associated with it to the host in order to gain access to
          the desired resource ("E"). In this sense, it is the "happy path"
          within phase 2.</t>
        </list></t>

      <t>In deploying UMA, implementers are expected to develop one or more
      UMA Profiles (described in <xref target="profiles"/>) that specify and
      restrict the various UMA protocol options, according to the deployment
      conditions.</t>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"/>.</t>

        <t>Unless otherwise noted, all the protocol properties and values are
        case sensitive.</t>
      </section>

      <section anchor="terminology" title="Basic Terminology">
        <t>UMA introduces the following terms, utilizing OAuth and other
        identity and access management concepts.<list hangIndent="6"
            style="hanging">
            <t hangText="authorizing user"><vspace/>The "user" in User-Managed
            Access. An UMA-defined variant of an OAuth resource owner,
            typically a web user who configures an authorization manager with
            policies that control how it assigns access permissions to
            requesters for a protected resource. The authorizing user can also
            be corporation or other legal person.</t>

            <t hangText="authorization manager (AM)"><vspace/>An UMA-defined
            variant of an OAuth authorization server that carries out an
            authorizing user's policies governing access to a protected
            resource.</t>

            <t hangText="protected resource"><vspace/>An access-restricted
            resource at a host, which is being policy-protected by an AM.</t>

            <t hangText="host"><vspace/>An UMA-defined variant of an OAuth
            resource server that enforces access to the protected resources it
            hosts, as governed by an authorization manager.</t>

            <t hangText="claim"><vspace/>A statement of the value or values of
            one or more identity attributes of a requesting party. A
            requesting party may need to provide claims to an authorization
            manager in order to satisfy policy and gain permission for access
            to a protected resource.</t>

            <t hangText="requester"><vspace/>An UMA-defined variant of an
            OAuth client that seeks access to a protected resource.</t>

            <t hangText="requesting party"><vspace/>A web user, or a
            corporation or other legal person, that uses a requester to seek
            access to a protected resource. The requesting party may or may
            not be the same person as the authorizing user.</t>

            <t hangText="resource set">A host-managed set of one or more
            resources to be AM-protected. In authorization policy terminology,
            a resource set is the "object" being protected.</t>

            <t hangText="scope">A bounded extent of access that is possible to
            perform on a resource set. In authorization policy terminology, a
            scope is one of the potentially many "verbs" that can logically
            apply to a resource set. Whereas OAuth scopes apply to resource
            sets that are implicit, UMA associates scopes with explicitly
            labeled resource sets ("objects").</t>

            <t hangText="permission">A scope of access over a particular
            resource set at a particular host that is being asked for by, or
            being granted to, a requester. In authorization policy
            terminology, a permission includes a "subject" (requesting party),
            "verbs" (one or more scopes of access), and an "object" (resource
            set).</t>
          </list></t>
      </section>

      <section anchor="endpoint-discussion"
               title="Endpoints, Endpoint Protection, and Tokens">
        <t>Various UMA entities present protected APIs for other UMA entities
        to use. These APIs are as follows:<list style="symbols">
            <t>The AM presents a <spanx>protection API</spanx> to the host, as
            standardized by this specification. This API is OAuth-protected,
            requiring a host to obtain from the AM an OAuth access token,
            referred to in this specification as a <spanx>protection API token (PAT)</spanx>
            to distinguish it from other tokens with other purposes. The host
            must present the PAT for successful use of OAuth-protected
            endpoints at this API.</t>

            <t>The AM presents an <spanx>authorization API</spanx> to the
            requester, as standardized by this specification. This API is
            OAuth-protected, requiring a requester to obtain from the AM an
            OAuth access token, referred to in this specification as an
            <spanx>authorization API token (AAT)</spanx> to distinguish it
            from other tokens with other purposes. The requester must present
            the AAT for successful use of OAuth-protected endpoints at this
            API.</t>

            <t>The host presents a <spanx>protected resource</spanx> to the
            requester, which can be considered an application-specific or
            proprietary API. This API is UMA-protected, requiring a requester
            to obtain from the AM an UMA-specific token referred to in this
            specification as a <spanx>requester permission token (RPT)</spanx>
            to distinguish it from other tokens with other purposes. The
            requester must present the RPT with sufficient permissions (also
            issued by the AM) for successful access to an UMA-protected
            resource.</t>
          </list></t>

        <t>The AM presents standard OAuth endpoints for token issuance and
        user authorization in protecting its own UMA APIs, as follows. Hosts
        asking to use the protection API would be issued a PAT. Requesters
        asking to use the authorization API would be issued an AAT.<list
            hangIndent="6" style="hanging">
            <t hangText="token endpoint">Part of standard OAuth, as profiled
            by UMA. The endpoint at which the host asks for a PAT and the
            requester asks for an AAT. (The AM may also choose to issue a
            refresh token.) This specification makes the OAuth token profile
            "bearer" mandatory for the AM to implement. The AM can declare its
            ability to handle other token profiles.</t>

            <t hangText="user authorization endpoint">Part of standard OAuth,
            as profiled by UMA. The endpoint to which the host or requester
            redirects an authorizing user or end-user requesting party,
            respectively, to authorize it to use this AM in resource
            protection or authorization, if the OAuth authorization code grant
            type (mandatory for the AM to implement) is being used.</t>
          </list></t>

        <t>The AM presents the following endpoints to the host as part of its
        protection API; these endpoints are OAuth-protected and require a PAT
        for access, for which the
        "http://docs.kantarainitiative.org/uma/scopes/prot.json" OAuth scope
        is required:<list hangIndent="6" style="hanging">
            <t hangText="resource set registration endpoint">The endpoint at
            which the host registers resource sets it wants the AM to protect.
            The operations available at this endpoint constitute a resource
            set registration API that is a subset of the protection API (see
            <xref target="reg-api"/>).</t>

            <t hangText="permission registration endpoint">The endpoint at
            which the host registers permissions that it anticipates a
            requester will shortly be asking for from the AM.</t>

            <t hangText="RPT status endpoint">The endpoint at which the host
            submits (forwards) an RPT that has accompanied an access request,
            to learn what currently valid permissions are associated with it.
            This specification defines an UMA token profile, "bearer", which
            is mandatory for the AM to implement and which, if used, REQUIRES
            the host to use this endpoint (see <xref
            target="h-am-rpt-status"/>).</t>
          </list></t>

        <t>The AM presents the following endpoints to the requester as part of
        its authorization API; these endpoints are OAuth-protected and
        requires an AAT for access, for which the
        "http://docs.kantarainitiative.org/uma/scopes/authorization" OAuth
        scope is required:<list hangIndent="6" style="hanging">
            <t hangText="RPT endpoint">The endpoint at which the requester
            asks the AM for the issuance of an RPT relating to this requesting
            party, host, and AM.</t>

            <t hangText="permission request endpoint">The endpoint at which
            the requester asks for authorization to have permissions
            associated with an RPT.</t>
          </list></t>

        <t>The host presents one or more protected resource endpoints to the
        requester; these endpoints are UMA-protected and require an RPT with
        sufficient permissions for access:<list hangIndent="6" style="hanging">
            <t hangText="protected resource endpoint">An application-specific
            endpoint at which a requester attempts to access resources. This
            can be a singular API endpoint, one of a set of API endpoints, a
            URI corresponding to an HTML document, or any other URI.</t>
          </list></t>

        <t>Similarly to OAuth authorization servers, an UMA AM has the
        opportunity to manage the validity periods of the access tokens, the
        corresponding refresh tokens (in the case of the PAT and AAT), and
        even the client credentials that it issues. Different lifetime
        strategies may be suitable for different resources and scopes of
        access, and the AM has the opportunity to give the authorizing user
        control through policy. These options are all outside the scope of
        this specification.</t>
      </section>

      <section anchor="scope-discussion"
               title="Scopes, Resource Sets, Permissions, and Authorization">
        <t>UMA extends the OAuth concept of a "scope" by defining scopes as
        applying to particular labeled resource sets, rather than leaving the
        relevant resources (such as API endpoints or URIs) implicit. A
        resource set can have any number of scopes, which together describe
        the universe of actions that <spanx>can be</spanx> taken on this
        protected resource set. For example, a resource set representing a
        status update API might have scopes that include adding an update or
        reading updates. A resource set representing a photo album might have
        scopes that include viewing a slideshow or printing the album. Hosts
        register resource sets and their scopes when there is not yet any
        particular requesting party or requester in the picture.</t>

        <t>Resource sets and scopes have meaning only to hosts and their
        users, in the same way that application-specific host APIs have
        meaning only to these entities. The AM is merely a conveyor of labels
        and descriptions for these constructs, to help the authorizing user
        set policies that guide eventual authorization processes.</t>

        <t>In contrast to an UMA scope, an UMA permission reflects an <spanx>actual</spanx>
        result of an authorization process for a specific requester (on behalf
        of a specific requesting party) to access a particular resource set in
        a scoped (bounded) manner. Hosts register permission requests with AMs
        on behalf of requesters that have attempted access there and transmit
        the resulting temporary permission tickets to requesters. Requesters
        subsequently ask AMs for permissions to be associated with their RPTs.
        AMs grant (or deny) permissions to requesters.</t>

        <t>An RPT is bound to a requesting party, the requester (client) being
        used by that party, the host at which protected resources of interest
        reside, and the AM that protects those resources. It becomes
        associated with as many permissions as are appropriate for gaining
        authorized access to resources protected at that host by any single AM
        (even if those permissions apply to resources managed by two or more
        different authorizing users at the same host using the same AM). Each
        individual permission is associated, in addition, with the authorizing
        user whose policies drove the authorization process. This enables
        meaningful, auditable, and potentially legally enforceable
        authorization for access (see <xref target="UMA-trustmodel"/>).</t>

        <t>Unlike UMA scopes (but similarly to tokens themselves; see <xref
        target="endpoint-discussion"/>), permissions have a validity period
        that the AM has the opportunity to control independently or with input
        from the authorizing user. These options are outside the scope of this
        specification.</t>
      </section>

      <section anchor="am-endpoints" title="AM Configuration Data">
        <t>The AM MUST provide configuration data to other entities it
        interacts with in a<xref format="default" target="RFC4627">
        JSON</xref> document that resides in an /uma-configuration directory
        at at its hostmeta <xref target="RFC6415"/> location. The
        configuration data documents major conformance options supported by
        the AM (described further in <xref target="conformance"/>) and
        protection and authorization API endpoints (as described in <xref
        target="endpoint-discussion"/>).</t>

        <t>The configuration data has the following properties and a
        Content-Type of application/uma-configuration+json. All endpoint URIs
        supplied SHOULD require the use of a transport-layer security
        mechanism such as TLS.<list hangIndent="6" style="hanging">
            <t hangText="version"><vspace/>REQUIRED. The version of the UMA
            core protocol to which this AM conforms. The value MUST be the
            string "1.0".</t>

            <t hangText="issuer"><vspace/>REQUIRED. A URI indicating the party
            operating the AM.</t>

            <t
            hangText="dynamic_client_registration_supported"><vspace/>OPTIONAL.
            Whether dynamic client registration, such as through <xref
            target="DynClientReg"/>, is supported for both hosts and
            requesters. The value, if this property is present, MUST be the
            string "yes" (dynamic registration is supported, using an
            unspecified method) or "no" (it is not supported; hosts and
            requesters are required to pre-register). The default is
            AM-specific. This property is not currently extensible. (This
            conformance option is largely a placeholder for now.)</t>

            <t hangText="oauth_token_profiles_supported"><vspace/>REQUIRED.
            PAT and AAT profiles produced by this AM. The property value is an
            array of string values. Currently the only string value for this
            property defined by this specification is "bearer", corresponding
            to the OAuth bearer token profile <xref target="OAuth-bearer"/>.
            The AM is REQUIRED to support this profile, and to supply this
            string value explicitly. The AM MAY declare its support for
            additional access token profiles by providing a unique absolute
            URI in a string value in the array for each one.</t>

            <t hangText="uma_token_profiles_supported"><vspace/>REQUIRED. RPT
            types produced by this AM. The property value is an array of
            string values. Currently the only string value for this property
            defined by this specification is "bearer", whose associations the
            host MUST determine through a token status interaction with the AM
            (see <xref target="h-am-rpt-status"/> for the definition of this
            profile). The AM is REQUIRED to support the UMA bearer token
            profile, and to supply this string value explicitly. The AM MAY
            declare its support for RPTs using additional UMA token profiles
            by providing a unique absolute URI in a string value in the array
            for each one.</t>

            <t hangText="oauth_grant_types_supported"><vspace/>REQUIRED. OAuth
            grant types supported by this AM in issuing PATs and AATs. The
            property value is an array of string values. Each string value
            MUST be one of the grant_type values defined in <xref
            target="OAuth2"/>, or alternatively an extension grant type
            indicated by a unique absolute URI.</t>

            <t hangText="claim_profiles_supported"><vspace/>OPTIONAL. Claim
            formats and associated sub-protocols for gathering claims from
            requesting parties, as supported by this AM. The property value is
            an array of string values. Currently the only string value for
            this property defined by this specification is "openid", for which
            details are supplied in <xref target="trusted-claims"/>. The AM
            MAY declare its support for additional claim profiles by assigning
            a unique absolute URI in a string value in the array for each
            one.</t>

            <t hangText="token_endpoint"><vspace/>REQUIRED. The endpoint URI
            at which the host or requester asks the AM for a PAT or AAT,
            respectively. A requested scope of
            "http://docs.kantarainitiative.org/uma/scopes/prot.json" results
            in a PAT. A requested scope of
            "http://docs.kantarainitiative.org/uma/scopes/authorization"
            results in an AAT. Available HTTP methods are as defined by <xref
            target="OAuth2"/> for a token endpoint.</t>

            <t hangText="user_endpoint"><vspace/>REQUIRED. The endpoint URI at
            which the host gathers the consent of the authorizing user or
            end-user requesting party, if the "authorization_code" grant type
            is used. Available HTTP methods are as defined by <xref
            target="OAuth2"/> for an end-user authorization endpoint.</t>

            <t
            hangText="resource_set_registration_endpoint"><vspace/>REQUIRED.
            The endpoint URI at which the host registers resource sets with
            the AM to put them under its protection (see <xref
            target="reg-api"/>). A PAT MUST accompany requests to this
            protected endpoint.</t>

            <t hangText="permission_registration_endpoint"><vspace/>REQUIRED.
            The endpoint URI at which the host registers permissions with the
            AM for which a requester will be seeking authorization (see <xref
            target="h-am-register-permission"/>). A PAT MUST accompany
            requests to this protected endpoint.</t>

            <t hangText="rpt_endpoint"><vspace/>REQUIRED. The endpoint URI at
            which the requester ask the AM for an RPT. An AAT token MUST
            accompany requests to this protected endpoint.</t>

            <t hangText="rpt_status_endpoint"><vspace/>REQUIRED. The endpoint
            URI at which the host requests the status of an RPT presented to
            it by a requester (see <xref target="h-am-rpt-status"/>). A PAT
            MUST accompany requests to this protected endpoint.</t>

            <t hangText="permission_request_endpoint"><vspace/>REQUIRED. The
            endpoint URI at which the requester asks for authorization to have
            a new permission associated with its RPT (possibly assigned
            dynamically if it had not existed before). An AAT MUST accompany
            requests to this protected endpoint.</t>
          </list></t>

        <figure>
          <preamble>Example of AM configuration data that resides at
          https://example.com/.well-known/uma-configuration (note the use of
          https: for endpoints throughout):</preamble>

          <artwork><![CDATA[{
"version":"1.0",
"issuer":"https://example.com",
"dynamic_client_registration_supported":"yes",
"oauth_token_profiles_supported":[
  "bearer"
],
"uma_token_profiles_supported":[
  "bearer"
],
"oauth_grant_types_supported":[
  "authorization_code"
],
"claim_profiles_supported":[
  "openid"
],
"token_endpoint":"https://am.example.com/token_uri",
"user_endpoint":"https://am.example.com/user_uri",
"resource_set_registration_endpoint":"https://am.example.com/host/rsrc_uri",
"rpt_status_endpoint":"https://am.example.com/host/status_uri",
"permission_registration_endpoint":"https://am.example.com/host/perm_uri",
"rpt_endpoint":"https://am.example.com/requester/rpt_uri",
"permission_request_endpoint":"https://am.example.com/requester/perm_uri"
}]]></artwork>
        </figure>

        <t>AM configuration data MAY contain extension properties that are not
        defined in this specification. Extension names that are unprotected
        from collisions are outside the scope of the current
        specification.</t>
      </section>
    </section>

    <section anchor="protecting-a-resource" title="Protecting a Resource">
      <t>Phase 1 of UMA is protecting a resource. The user, host, and AM
      perform the following steps in order to successfully complete Phase 1:
      <list style="numbers">
          <t>The host (having learned the general location of the relevant AM
          out of band) looks up the AM's configuration data and learns about
          its relevant endpoints and supported formats.</t>

          <t>If the host has not yet obtained a unique OAuth client identifier
          and optional secret from the AM, it registers with the AM as
          required.</t>

          <t>The host obtains a protection API token (PAT) from the AM with
          the authorizing user's consent, by asking for the
          "http://docs.kantarainitiative.org/uma/scopes/prot.json" scope.</t>

          <t>The host registers any resource sets with the AM that are
          intended to be protected. (This step is repeated when and as
          needed.)</t>
        </list></t>

      <t>If the host undertakes these actions successfully, the results are as
      follows:<list style="symbols">
          <t>The host has received configuration data about the AM, such as
          endpoints it needs to use in interacting with the AM.</t>

          <t>The host has received a PAT that represents this authorizing
          user's approval for the host to work with the AM in protecting
          resources.</t>

          <t>The AM has acquired information about resource sets at this host
          that it is supposed to protect on behalf of this authorizing
          user.</t>
        </list></t>

      <section title="Host Looks Up AM Configuration Data">
        <t>The host needs to learn the AM's protection API endpoints before
        they can begin interacting. To get the host started in this process,
        the authorizing user might provide the AM's location to it, for
        example, by typing a URL into a web form field or clicking a button.
        Alternatively, the host might already be configured to work with a
        single AM without requiring any user input. The exact process is
        beyond the scope of this specification, and it is up to the host to
        choose a method to learn the AM's general location.</t>

        <t>From the data provided, discovered, or configured, the host MUST
        retrieve the AM's configuration data document, as described in Section
        2 of <xref target="RFC6415">hostmeta</xref>. For example, if the user
        supplied "example.com" as the Authorization Manager's domain, the host
        creates the URL "https://example.com/.well-known/uma-configuration"
        and performs a GET request on it. The AM MUST return content that
        includes UMA protection API endpoints as defined in <xref
        target="am-endpoints"/>.</t>
      </section>

      <section title="Host Registers with AM">
        <t>If the host has not already obtained an OAuth client identifier and
        optional secret from this AM, in this step it MUST do so in order to
        engage in OAuth-based interactions with the AM. It MAY do this using
        <xref target="DynClientReg"/>, if the AM supports it (see <xref
        target="am-endpoints"/> for how the AM MAY indicate support).</t>
      </section>

      <section anchor="host-access-token"
               title="Host Obtains Protection API Token">
        <t>In this step, the host acquires a PAT from the AM. The token
        represents the approval of the authorizing user for this host to trust
        this AM for protecting resources belonging to this user.</t>

        <t>The host MUST use OAuth 2.0 <xref target="OAuth2"/> to obtain the
        protection API token. Here the host acts in the role of an OAuth
        client requesting the
        "http://docs.kantarainitiative.org/uma/scopes/prot.json" scope; the
        authorizing user acts in the role of an OAuth end-user resource owner;
        and the AM acts in the role of an OAuth authorization server. Once the
        host has obtained its PAT, it presents it to the AM at various
        protection API endpoints; in presenting these endpoints the AM acts in
        the role of a resource server.</t>

        <t>The AM MAY support the use of any grant type, but MUST support the
        authorization_code grant type, and SHOULD support the SAML bearer
        token grant type <xref target="OAuth-SAML"/>
        (urn:ietf:params:oauth:grant-type:saml2-bearer) if it anticipates
        working with hosts that are operating in environments where the use of
        SAML is prevalent. The AM MUST indicate all grant types it supports in
        its configuration data, as defined in <xref
        target="am-endpoints"/>.</t>

        <t>The host has completed this step successfully when it possesses a
        PAT it can use to get access to the AM's protection API on this user's
        behalf.</t>
      </section>

      <section title="Host Registers Sets of Resources to Be Protected">
        <t>Once the host has received a PAT, for any of the user's sets of
        resources that are to be protected by this AM, it MUST register these
        resource sets at the AM's registration endpoint.</t>

        <t>Note that the host is free to offer the option to protect any
        subset of the user's resources using different AMs or other means
        entirely, or to protect some resources and not others. Additionally,
        the choice of protection regimes can be made explicitly by the user or
        implicitly by the host. Any such partitioning by the host or user is
        outside the scope of this specification.</t>

        <t>See <xref target="resource-reg-example"/> for an extended example
        of registering resource sets.</t>

        <section anchor="action-desc" title="Scope Descriptions">
          <t>A scope is a bounded extent of access that is possible to perform
          on a resource set. A scope description is a JSON document with the
          following properties and a Content-Type of
          application/uma-scope+json:<list style="hanging">
              <t hangText="name">REQUIRED. A human-readable string describing
              some scope (extent) of access. This name is intended for
              ultimate use in the AM's user interface to assist the user in
              setting policies for protected resource sets that have this
              available scope.</t>

              <t hangText="icon_uri">OPTIONAL. A URI for a graphic icon
              representing the scope. The referenced icon is intended for
              ultimate use in the AM's user interface to assist the user in
              setting policies for protected resource sets that have this
              available scope.</t>
            </list></t>

          <figure>
            <preamble>For example, this description characterizes a scope that
            involves reading or viewing resources (vs. creating them or
            editing them in some fashion):</preamble>

            <artwork><![CDATA[
{
  "name": "View",
  "icon_uri": "http://www.example.com/icons/reading-glasses"
}
]]></artwork>
          </figure>

          <t>Scope descriptions MAY contain extension properties that are not
          defined in this specification. Extension names that are unprotected
          from collisions are outside the scope of the current
          specification.</t>

          <t>A host MUST list a resource set's available scopes using URI
          references (as defined in <xref target="resource-set-desc"/>). The
          scopes available for use at any one host MUST have unique URI
          references so that the host's scope descriptions are uniquely
          distinguishable. A scope URI reference MAY include a fragment
          identifier. Scope descriptions MAY reside anywhere. The host is not
          required to self-host scope descriptions and may wish to point to
          standardized scope descriptions residing elsewhere. Scope
          description documents MUST be accessible to AMs through GET calls
          made to these URI references.</t>

          <t>See <xref target="scope-discussion"/> for further discussion of
          scope-related concepts, and <xref target="resource-reg-example"/>
          for a long-form example of scopes used in resource set
          registration.</t>
        </section>

        <section anchor="resource-set-desc" title="Resource Set Descriptions">
          <t>The host defines a resource set that needs protection by
          registering a resource set description at the AM. The host registers
          the description and manages its lifecycle at the AM's host resource
          set registration endpoint by using the resource set registration
          API, as defined in <xref target="reg-api"/>.</t>

          <t>A resource set description is a JSON document with the following
          properties and a Content-Type of
          application/uma-resource-set+json:<list style="hanging">
              <t hangText="name">REQUIRED. A human-readable string describing
              a set of one or more resources. The AM SHOULD use the name in
              its user interface to assist the user in setting policies for
              protecting this resource set.</t>

              <t hangText="icon_uri">OPTIONAL. A URI for a graphic icon
              representing the resource set. If provided, the AM SHOULD use
              the referenced icon in its user interface to assist the user in
              setting policies for protecting this resource set.</t>

              <t hangText="scopes">REQUIRED. An array providing the URI
              references of scope descriptions that are available for this
              resource set. The AM SHOULD use the scope names and any icons
              defined as part of the referenced scopes in its user interface
              to assist the user in setting policies for protecting this
              resource set.</t>
            </list></t>

          <figure>
            <preamble>For example, this description characterizes a resource
            set (a photo album) that can potentially be only viewed, or
            alternatively to which full access can be granted; the URIs point
            to scope descriptions as defined in <xref
            target="action-desc"/>:</preamble>

            <artwork><![CDATA[
{
  "name": "Photo Album",
  "icon_uri": "http://www.example.com/icons/flower.png",
  "scopes": [
    "http://photoz.example.com/dev/scopes/view",
    "http://photoz.example.com/dev/scopes/all"
  ]
}
]]></artwork>
          </figure>

          <t>Resource set descriptions MAY contain extension properties that
          are not defined in this specification. Extension names that are
          unprotected from collisions are outside the scope of the current
          specification.</t>

          <t>When a host creates or updates a resource set description (see
          <xref target="reg-api"/>), the AM MUST attempt to retrieve the
          referenced scope descriptions. It MAY cache such descriptions as
          long as indicated in the HTTP cache-control header for the scope
          description resource unless the resource set description is
          subsequently updated within the validity period. At the beginning of
          an authorizing user's login session at the AM, the AM MUST attempt
          to re-retrieve scope descriptions applying to that user whose cached
          versions have expired.</t>
        </section>

        <section anchor="reg-api" title="Resource Set Registration API">
          <t>The host uses the RESTful API at the AM's resource set
          registration endpoint to create, read, update, and delete resource
          set descriptions, along with listing groups of such descriptions.
          The host MUST use its valid PAT obtained previously to gain access
          to this endpoint. The resource set registration API is a subset of
          the protection API.</t>

          <t>The host is free to use its own methods of identifying and
          describing resource sets. The AM MUST treat them as opaque for the
          purpose of authorizing access, other than associating them with the
          authorizing user (as represented by the PAT used to access the API).
          On successfully registering a resource set, the host MUST use UMA
          mechanisms to limit access to any resources corresponding to this
          resource set, relying on the AM to supply currently valid
          permissions for authorized access. The host MUST outsource
          protection to the AM according to the currently registered state of
          a resource set. This requirement holds true so long as the host has
          one or more registsred resource sets.</t>

          <t>(Note carefully the similar but distinct senses in which the word
          "resource" is used in this section. UMA resource set descriptions
          are themselves managed as web resources at the AM through this
          API.)</t>

          <t>The AM MUST present an API for registering resource set
          descriptions at a set of URIs with the structure
          "{rsreguri}/resource_set/{rsid}", where the PAT provides sufficient
          context to distinguish between identical resource set identifiers
          assigned by different hosts.</t>

          <t>The components of these URIs are defined as follows:<list
              style="hanging">
              <t hangText="{rsreguri}">The AM's resource set registration
              endpoint as advertised in its configuration data (see <xref
              target="am-endpoints"/>).</t>

              <t hangText="{rsid}">An identifier for a resource set
              description.</t>
            </list></t>

          <t>Without a specific resource set identifier path component, the
          URI applies to the set of resource set descriptions already
          registered.</t>

          <t>Following is a summary of the five registration operations the AM
          is REQUIRED to support. Each is defined in its own section below.
          All other methods are unsupported. This API uses ETag and If-Match
          to ensure the desired resource at the AM is targeted.<list
              style="symbols">
              <t>Create resource set description: PUT /resource_set/{rsid}</t>

              <t>Read resource set description: GET /resource_set/{rsid}</t>

              <t>Update resource set description: PUT /resource_set/{rsid}
              with If-Match</t>

              <t>Delete resource set description: DELETE
              /resource_set/{rsid}</t>

              <t>List resource set descriptions: GET /resource_set/ with
              If-Match</t>
            </list></t>

          <t>If the request to the resource set registration endpoint is
          incorrect, then the AM responds with an error message (see <xref
          target="uma-error-response"/>) by including one of the following
          error codes with the response: <list style="hanging">
              <t hangText="unsupported_method_type">The host request used an
              unsupported HTTP method. The AM MUST respond with the HTTP 405
              (Method Not Allowed) status code and MUST fail to act on the
              request.</t>

              <t hangText="not_found">The resource set requested from the AM
              cannot be found. The AM MUST respond with HTTP 404 (Not Found)
              status code.</t>

              <t hangText="precondition_failed">The resource set that was
              requested to be deleted or updated at the AM did not match the
              If-Match value present in the request. The AM MUST respond with
              HTTP 412 (Precondition Failed) status code and MUST fail to act
              on the request.</t>
            </list></t>

          <section anchor="create-resource-set"
                   title="Create Resource Set Description">
            <t>Adds a new resource set description using the PUT method,
            thereby putting it under the AM's protection. If the request is
            successful, the AM MUST respond with a status message that
            includes an ETag header and _id and _rev properties for managing
            resource set description versioning.</t>

            <figure>
              <preamble>Form of a "create resource set description" HTTP
              request:</preamble>

              <artwork><![CDATA[
PUT /resource_set/{rsid} HTTP/1.1
Content-Type: application/uma-resource-set+json
...

(body contains JSON resource set description to be created)
]]></artwork>
            </figure>

            <figure>
              <preamble>Form of a successful HTTP response:</preamble>

              <artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/uma-status+json
ETag: (matches "_rev" property in returned object)
...

{
  "status": "created",
  "_id": (id of created resource set),
  "_rev": (ETag of created resource set)
}
]]></artwork>
            </figure>

            <t>On successful registration, the AM MAY return a redirect policy
            URI to the host in a property with the name "policy_uri". This URI
            allows the host to redirect the user to a specific user interface
            within the AM where the user can immediately set or modify access
            policies for the resource set that was just registered.</t>

            <figure>
              <preamble>Form of a successful HTTP response:</preamble>

              <artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/uma-status+json
ETag: (matches "_rev" property in returned object)
...

{
  "status": "created",
  "_id": (id of created resource set),
  "_rev": (ETag of created resource set)
  "policy_uri":"http://am.example.com/host/222/resource/333/policy"
}
]]></artwork>
            </figure>
          </section>

          <section anchor="read-resource-set"
                   title="Read Resource Set Description">
            <t>Reads a previously registered resource set description using
            the GET method. If the request is successful, the AM MUST respond
            with a status message that includes an ETag header and _id and
            _rev properties for managing resource set description
            versioning.</t>

            <figure>
              <preamble>Form of a "read resource set description" HTTP
              request:</preamble>

              <artwork><![CDATA[
GET /resource_set/{rsid} HTTP/1.1
...
]]></artwork>
            </figure>

            <figure>
              <preamble>Form of a successful HTTP response:</preamble>

              <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/uma-resource-set+json
...

(body contains JSON resource set description, including _id and _rev)
]]></artwork>
            </figure>

            <t>If the referenced resource does not exist, the AM MUST produce
            an error response with an error property value of "not_found", as
            defined in <xref target="reg-api"/>.</t>

            <t>On successful read, the AM MAY return a redirect policy URI to
            the host in a property with the name "policy_uri". This URI allows
            the host to redirect the user to a specific user interface within
            the AM where the user can immediately set or modify access
            policies for the resource set that was read.</t>
          </section>

          <section anchor="update-resource-set"
                   title="Update Resource Set Description">
            <t>Updates a previously registered resource set description using
            the PUT method, thereby changing the resource set's protection
            characteristics. If the request is successful, the AM MUST respond
            with a status message that includes an ETag header and _id and
            _rev properties for managing resource set description
            versioning.</t>

            <figure>
              <preamble>Form of an "update resource set description" HTTP
              request:</preamble>

              <artwork><![CDATA[
PUT /resource_set/{rsid} HTTP/1.1
Content-Type: application/resource-set+json
If-Match: (entity tag of resource)
...

(body contains JSON resource set description to be updated)
]]></artwork>
            </figure>

            <figure>
              <preamble>Form of a successful HTTP response:</preamble>

              <artwork><![CDATA[
HTTP/1.1 204 No Content
ETag: "2"
...
]]></artwork>
            </figure>

            <t>If the entity tag does not match, the AM MUST produce an error
            response with an error property value of "precondition_failed", as
            defined in <xref target="reg-api"/>.</t>

            <t>On successful update, the AM MAY return a redirect policy URI
            to the host in a property with the name "policy_uri". This URI
            allows the host to redirect the user to a specific user interface
            within the AM where the user can immediately set or modify access
            policies for the resource set that was just updated.</t>
          </section>

          <section anchor="delete-resource-set"
                   title="Delete Resource Set Description">
            <t>Deletes a previously registered resource set description using
            the DELETE method, thereby removing it from the AM's protection
            regime.</t>

            <figure>
              <preamble>Form of a "delete resource set description" HTTP
              request:</preamble>

              <artwork><![CDATA[
DELETE /resource_set/{rsid}
If-Match: (entity tag of resource)
...
]]></artwork>
            </figure>

            <figure>
              <preamble>Form of a successful HTTP response:</preamble>

              <artwork><![CDATA[
HTTP/1.1 204 No content
...
]]></artwork>
            </figure>

            <t>As defined in <xref target="reg-api"/>, if the referenced
            resource does not exist the AM MUST produce an error response with
            an error property value of "not_found", and if the entity tag does
            not match the AM MUST produce an error response with an error
            property value of "precondition_failed".</t>
          </section>

          <section anchor="list-resource-sets"
                   title="List Resource Set Descriptions">
            <t>Lists all previously registered resource set identifiers for
            this user using the GET method. The AM MUST return the list in the
            form of a JSON array of {rsid} values.</t>

            <t>The host uses this method as a first step in checking whether
            its understanding of protected resources is in full
            synchronization with the AM's understanding.</t>

            <figure>
              <preamble>Form of a "list resource set descriptions" HTTP
              request:</preamble>

              <artwork><![CDATA[
GET /resource_set HTTP/1.1
...
]]></artwork>
            </figure>

            <figure>
              <preamble>HTTP response:</preamble>

              <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
...

(body contains JSON array of {rsid} values)
]]></artwork>
            </figure>
          </section>
        </section>
      </section>
    </section>

    <!--NOTE 3/12/2012: RE-WORKED SECTION 3 INTO TEXT AGAIN (using RPT and AAT).        -->

    <section anchor="getting-authz-accessing-resource"
             title="Getting Authorization and Accessing a Resource">
      <t>Phase 2 of UMA is getting authorization, and Phase 3 is accessing a
      resource. In these phases, an AM orchestrates and controls requesting
      parties' access to an authorizing user's protected resources at a host,
      under conditions dictated by that user.</t>

      <t>Phase 3 is merely the successful completion of a requester's access
      attempt that initially involved several embedded interactions among the
      requester, AM, and host in Phase 2. Phase 2 always begins with the
      requester attempting access at a protected resource endpoint at the
      host. How the requester came to learn about this endpoint is out of
      scope for this specification. The authorizing user might, for example,
      have advertised its availability publicly on a blog or other website,
      listed it in a discovery service, or emailed a link to a particular
      intended requesting party.</t>

      <t>The host responds to the requester's access request in one of several
      ways depending on the circumstances of the request, either immediately
      or having first performed one or more embedded interactions with the AM.
      Depending on the nature of the host's response to an failed access
      attempt, the requester itself engages in embedded interactions with the
      AM before re-attempting access.</t>

      <t>The interactions are as follows. Each interaction MAY be the last, if
      the requester chooses not to continue pursuing the access attempt or the
      host chooses not to continue facilitating it.<list style="numbers">
          <t>The requester attempts access at a particular protected resource
          at a host (see <xref target="r-h-attempt-access"/>).<list
              style="letters">
              <t>If the access attempt is unaccompanied by a requester access
              token, the host responds immediately with an HTTP 401
              (Unauthorized) response and instructions on where to go to
              obtain one (see <xref target="authz-permission-token"/>).</t>

              <t>If the access attempt was accompanied by an RPT, the host
              checks the RPT's status (see <xref
              target="h-am-rpt-status"/>).<list style="numbers">
                  <t>If the RPT is invalid (for example, it is not applicable
                  to this host), the host responds to the requester with an
                  HTTP 401 (Unauthorized) response and instructions on where
                  to go to obtain a token (see <xref
                  target="authz-permission-token"/>).</t>

                  <t>If the RPT is valid but has insufficient permission, the
                  host registers a suitable permission request on the
                  requester's behalf at the AM (see <xref
                  target="h-am-register-permission"> </xref>), and then
                  responds to the requester with an HTTP 403 (Forbidden)
                  response and instructions on where to go to request
                  authorization to associate that permission with its token
                  (see <xref target="insufficient-rpt"/>).</t>

                  <t>If the RPT is valid, and at least one of the permissions
                  associated with the token matches the scope of attempted
                  access, the host responds to the requester's access attempt
                  with an HTTP 200 (OK) response and a representation of the
                  resource (see <xref target="sufficient-rpt"/>).</t>
                </list></t>
            </list></t>

          <t>If the requester (possessing no RPT or an invalid RPT) received a
          401 response and an RPT endpoint, it then requests an RPT from that
          endpoint (see <xref target="authz-permission-token"/>).</t>

          <t>If the requester (posessing a valid RPT) received a 403 response
          and a permission ticket, it then requests from the AM the permission
          that matches the ticket (<xref target="r-am-authz-scope"/>). If the
          AM needs requesting party claims in order to assess this requester's
          suitability to have the permission, it engages in a claims-gathering
          flow with the requesting party (see <xref
          target="authz-flows"/>).<list style="letters">
              <t>If the requester does not already have an AAT at the
              appropriate AM to be able to use its permission request
              endpoint, it first engages in an OAuth grant flow to obtain one
              (see <xref target="authz-api-token"/>).</t>
            </list></t>
        </list></t>

      <t>The interactions are described in detail in the following
      sections.</t>

      <section anchor="r-h-attempt-access"
               title="Requester-Host: Attempt Access at Protected Resource">
        <t>This interaction assumes that the host has previously registered
        with an AM one or more resource sets that correspond to the resource
        to which access is being attempted, such that the host considers this
        resource to be UMA-protected by a particular AM.</t>

        <t>The requester typically attempts to access the desired resource at
        the host directly (for example, when a human operator of the requester
        software clicks on a thumbnail representation of the resource). The
        requester is expected to discover, or be provisioned or configured
        with, knowledge of the protected resource and its location out of
        band. Further, the requester is expected to acquire its own knowledge
        about the application-specific methods made available by the host for
        operating on this protected resource (such as viewing it with a GET
        method, or transforming it with some complex API call) and the
        possible scopes of access.</t>

        <figure>
          <preamble>Example of a request carrying no RPT:</preamble>

          <artwork><![CDATA[
GET /album/photo.jpg HTTP/1.1
Host: photoz.example.com
...
]]></artwork>
        </figure>

        <figure>
          <preamble>Example of a request carrying an RPT:</preamble>

          <artwork><![CDATA[
GET /album/photo.jpg HTTP/1.1
Authorization: Bearer vF9dft4qmT
Host: photoz.example.com
...
]]></artwork>
        </figure>

        <t>The host responds in one of the following ways.</t>

        <section anchor="no-rpt"
                 title="Requester Presents No Requester Permission Token">
          <t>If the requester does not present any access token with the
          request, the host MUST return an HTTP 401 (Unauthorized) status
          code, along with providing the AM's URI in an "am_uri" property to
          facilitate AM metadata discovery, including discovery of the
          endpoint where the requester can request an RPT (<xref
          target="authz-permission-token"/>), by the requester.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 401 Unauthorized
   WWW-Authenticate: UMA realm="example",
    host_id="photoz.example.com",
    am_uri="http://am.example.com"
   ...
]]></artwork>
          </figure>
        </section>

        <section anchor="insufficient-rpt"
                 title="Requester Presents a Requester Permission Token That Has Insufficient Permission">
          <t>If the requester presents an RPT with its request, the host
          SHOULD determine the RPT's status (see <xref
          target="h-am-rpt-status"/>). If the RPT is invalid, the host
          redirects the requester to the RPT endpoint at the AM in order to
          obtain a correct RPT (see <xref
          target="authz-permission-token"/>).</t>

          <t>If the RPT is valid but has insufficient permission for the type
          of access sought, the Host SHOULD register a permission with the AM
          that would suffice for that scope of access (see <xref
          target="h-am-register-permission"/>), and then respond to the
          requester with the HTTP 403 (Forbidden) status code, along with
          providing the AM's URI in the header of the message and the
          permission ticket it just received from the AM in the body in JSON
          form.</t>

          <figure>
            <preamble>Example of the host's response:</preamble>

            <artwork><![CDATA[
HTTP/1.1 403 Forbidden
WWW-Authenticate: UMA realm="example",
  host_id="photoz.example.com",
  am_uri="http://am.example.com"

{
"ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
}
]]></artwork>
          </figure>
        </section>

        <section anchor="sufficient-rpt"
                 title="Requester Presents a Valid Requester Permission Token with Sufficient Permissions">
          <t>If the RPT's status is associated with at least one currently
          valid permission that applies to the scope of access attempted by
          the requester (see <xref target="h-am-rpt-status"/>), the host MUST
          give access to the desired resource.</t>

          <figure>
            <preamble>Example of the host's response:</preamble>

            <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: image/jpeg
...

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja
3kAAQAEAAAAPAAA/+4ADkFkb2JlAGTAAAAAAf
/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAo
KCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwb
]]></artwork>
          </figure>

          <t>This response constitutes the conclusion of Phase 3 of UMA.</t>

          <t>The host MUST NOT give access where the token's status is not
          associated with at least one currently active permission that
          suffices for that scope of access.</t>
        </section>
      </section>

      <section anchor="h-am-register-permission"
               title="Host-AM: Register a Permission">
        <t>In response to receiving an access request accompanied by an RPT
        that is invalid or has insufficient permissions, the host SHOULD
        register a permission with the AM that would be sufficient for the
        type of access sought. The AM returns a permission ticket for the host
        to give to the requester in its response.</t>

        <t>The permission ticket is a short-lived opaque structure whose form
        is determined by the AM. The ticket value MUST be securely random (for
        example, not merely part of a predictable sequential series), to avoid
        denial-of-service attacks. Since the ticket is an opaque structure
        from the point of view of the requester, the AM is free to include
        information regarding expiration time within the opaque ticket for its
        own consumption. When the requester subsequently asks the AM to add
        permissions to its RPT, it will submit this ticket to the AM.</t>

        <t>The host registers the permission using the POST method at the AM's
        permission registration endpoint. In doing so the host MUST provide
        its PAT to the AM in order to get access to this endpoint. The body of
        the HTTP request message contains a JSON document providing the
        requested permission.</t>

        <t>The requested scope is an object with the name
        "requested_permission" and the following properties:<list
            style="hanging">
            <t hangText="resource_set_id">REQUIRED. The identifier for a
            resource set, access to which this requester is seeking access.
            The identifier MUST correspond to a resource set that was
            previously registered.</t>

            <t hangText="scopes">REQUIRED. An array referencing one or more
            identifiers of scopes to which access is needed for this resource
            set. Each scope identifier MUST correspond to a scope that was
            registered by this host for the referenced resource set.</t>
          </list></t>

        <figure>
          <preamble>Example of an HTTP request that registers a permission at
          the AM's permission registration endpoint:</preamble>

          <artwork><![CDATA[
POST /host/scope_reg_uri/photoz.example.com HTTP/1.1
Content-Type: application/uma-requested-permission+json
Host: am.example.com

{
  "resource_set_id": "112210f47de98100",
  "scopes": [
      "http://photoz.example.com/dev/actions/view",
      "http://photoz.example.com/dev/actions/all"
  ]
}
]]></artwork>
        </figure>

        <t>If the registration request is successful, the AM responds with an
        HTTP 201 (Created) status code and includes the Location header in its
        response as well as the "ticket" property in the JSON-formatted
        body.</t>

        <figure>
          <preamble>For example:</preamble>

          <artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/uma-permission-ticket+json
Location: https://am.example.com/permreg/host/photoz.example.com/5454345rdsaa4543
...

{
"ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
}
]]></artwork>
        </figure>

        <t>If the registration request is authenticated properly but fails due
        to other reasons, the AM responds with an HTTP 400 (Bad Request)
        status code and includes one of the following UMA error codes (see
        <xref target="uma-error-response"/>):<list style="hanging">
            <t hangText="invalid_resource_set_id">The provided resource set
            identifier was not found at the AM.</t>

            <t hangText="invalid_scope">At least one of the scopes included in
            the request was not registered previously by this host.</t>
          </list></t>
      </section>

      <section anchor="h-am-rpt-status"
               title="Host Determines the Requester Permission Token Status">
        <t>On receiving an RPT, the host MUST ascertain its status before
        granting or denying access to the requester. An RPT that a requester
        provides to a host in order to get access is associated with a set of
        permissions that govern whether the requester is authorized for
        access. The token's nature and format are dictated by its defined
        profile; the profile might allow it to be self-contained, such that
        the host is able to ascertain its status locally, or might require or
        allow the host to make a run-time status request of the AM that issued
        the token.</t>

        <t>This specification makes one type of RPT mandatory to implement:
        the UMA bearer token profile, as defined in <xref
        target="uma-bearer-token-profile"/>. Alternate RPT profiles MAY define
        their own unique token formats and MAY require, allow, or prohibit use
        of the RPT status endpoint.</t>

        <section anchor="uma-bearer-token-profile"
                 title="UMA Bearer Token Profile">
          <t>This section defines the format and protocol requirements for the
          UMA bearer token profile. An AM MUST support the UMA bearer token
          profile and must indicate its support in the
          "uma_token_profiles_supported" property in the configuration data
          (see <xref target="am-endpoints"/>).</t>

          <t>On receiving an RPT of the "Bearer" type in an authorization
          header from a requester making an access attempt, the host MUST ask
          the AM for the RPT's status unless it has an unexpired cached status
          description for this RPT, which it MAY use instead. In order to ask
          the AM for an RPT's status, the host makes the request to the AM
          with a POST request to the AM's RPT status endpoint. The body of the
          HTTP request message contains a JSON document providing the RPT. The
          host MUST provide its own PAT in the request in order to gain access
          to the RPT status endpoint.</t>

          <t>Note that although the host's request is a safe operation, which
          normally would use the GET operation, this specification dictates
          the use of POST because it is advantageous for security of bearer
          tokens. Since the host provides its own PAT in the authorization
          header of the request, the RPT appears in the request body. A GET
          operation would expose the message to being recorded in AM access
          logs.</t>

          <figure>
            <preamble>Example of a request to the RPT status endpoint that
            provides the PAT in the header:</preamble>

            <artwork><![CDATA[
POST /token_status HTTP/1.1
Host: am.example.com
Authorization: Bearer vF9dft4qmT
Content-Type: application/json
...

{
  "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
  "resource_set_id": "112210f47de98100",
  "host_id": "photoz.example.com"
}
]]></artwork>
          </figure>

          <t>The AM returns the RPT's status in an HTTP response using the 200
          OK status code, containing a JSON document supplying the RPT status
          description. The RPT status description either contains all of the
          permissions that are currently valid for this RPT or indicates that
          the RPT is invalid (see <xref target="scope-discussion"/>). The AM
          MAY set a cache period for the returned RPT status description that
          allows the host to reuse it over some period of time when it later
          sees the same RPT.</t>

          <t>The status description for a valid RPT is a JSON array of zero or
          more permission objects, each with the following properties:<list
              style="hanging">
              <t hangText="resource_set_id">REQUIRED. A string that uniquely
              identifies the resource set, access to which has been granted to
              this requester on behalf of this requesting party. The
              identifier MUST correspond to a resource set that was previously
              registered as protected.</t>

              <t hangText="scopes">REQUIRED. An array referencing one or more
              URIs of scopes to which access was granted for this resource
              set. Each scope MUST correspond to a scope that was registered
              by this host for the referenced resource set.</t>

              <t hangText="exp">REQUIRED. An integer representing the
              expiration time on or after which the permission MUST NOT be
              accepted for authorized access. The processing of the exp
              property requires that the current date/time MUST be before the
              expiration date/time listed in the exp claim. Host implementers
              MAY provide for some small leeway, usually no more than a few
              minutes, to account for clock skew.</t>
            </list></t>

          <figure>
            <preamble>Example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/uma-rpt-status+json
Cache-Control: no-store
...

[
  {
    "resource_set_id": "112210f47de98100",
    "scopes": [
      "http://photoz.example.com/dev/actions/view",
      "http://photoz.example.com/dev/actions/all"
    ],
    "exp": 1300819380
  }
]
]]></artwork>
          </figure>

          <figure>
            <preamble>The token status description for an invalid RPT is a
            JSON structure, as follows.</preamble>

            <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/uma-rpt-status+json
...

{
  "rpt_status": "invalid"
}
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="r-am-obtain-permission"
               title="Requester-AM: Ask for Requester Permission Token and Permission">
        <t>A requester making an access attempt accompanied by no RPT or by an
        invalid RPT will receive a 401 response back from the host, along with
        the AM's location from which it can learn the RPT endpoint. In this
        case, the requester must obtain a valid RPT from the AM's RPT endpoint
        provided in the response (see <xref
        target="authz-permission-token"/>).</t>

        <t>A requester making an access attempt with a valid RPT that has
        insufficient permissions associated with it will receive a 403
        response back from the host, along with a permission ticket and the
        AM's location from which it can learn the permission request endpoint.
        In this case, the requester uses the permission ticket to ask for the
        necessary permission to be associated with its RPT. This process
        necessarily involves the requesting party (the natural or legal person
        operating the requester application).</t>

        <t>The requester takes action in the following ways.</t>

        <section title="Requester Looks Up AM Configuration Data">
          <t>The requester needs to learn the AM's various authorization API
          endpoints. From the "am_uri" information provided in the host's
          response, the requester MUST retrieve the AM's configuration data
          document, as described in Section 2 of <xref
          target="RFC6415">hostmeta</xref>. For example, if the "am_uri" is
          "example.com", the requester creates the URL
          "https://example.com/.well-known/uma-configuration" and performs a
          GET request on it. The AM MUST return content that includes UMA
          authorization API endpoints as defined in <xref
          target="am-endpoints"/>.</t>
        </section>

        <section anchor="requester-registers-with-am"
                 title="Requester Registers with AM">
          <t>If the requester has not already obtained an OAuth client
          identifier and optional secret from this AM, in this step it MUST do
          so in order to engage in OAuth-based interactions with the AM. It
          MAY do this using <xref target="DynClientReg"/>, if the AM supports
          it (see <xref target="am-endpoints"/> for how the AM MAY indicate
          support).</t>
        </section>

        <section anchor="authz-api-token"
                 title="Requester Obtains Authorization API Token">
          <t>In this step, the requester acquires an AAT from the AM. The
          token represents the approval of this requesting party for this
          requester to engage with this AM to supply claims, ask for
          permissions, and perform any other tasks needed for obtaining
          authorization for access to resources at all hosts that use this
          AM.</t>

          <t>The requester MUST use OAuth 2.0 <xref target="OAuth2"/> to
          obtain the AAT. Here the requester acts in the role of an OAuth
          client requesting the
          "http://docs.kantarainitiative.org/uma/scopes/authz.json" scope; the
          requesting party acts in the role of an OAuth resource owner; and
          the AM acts in the role of an OAuth authorization server. Once the
          requester has obtained its AAT, it presents it to the AM at the
          permission request API endpoint; in presenting this endpoint the AM
          acts in the role of a resource server.</t>

          <t>By virtue of being able to identify this requester/requesting
          party pair uniquely across all hosts, the AM is able to manage the
          process of authorization and claims-gathering efficiently. These
          management processes are outside the scope of this
          specificaiton.</t>

          <t>The AM MAY support the use of any grant type, but MUST support
          the authorization_code grant type, and SHOULD support the SAML
          bearer token grant type <xref target="OAuth-SAML"/>
          (urn:ietf:params:oauth:grant-type:saml2-bearer) if it anticipates
          working with requesters that are operating in environments where the
          use of SAML is prevalent. The AM MUST indicate all grant types it
          supports in its configuration data, as defined in <xref
          target="am-endpoints"/>.</t>

          <t>The requester has completed this step successfully when it
          possesses a AAT it can use to get access to the AM's authorization
          API on the requesting party's behalf.</t>
        </section>

        <section anchor="authz-permission-token"
                 title="Requester Obtains Requester Permission Token">
          <t>In this step, if the requester needs an RPT that applies to this
          requesting party for this host and this AM, the requester obtains an
          RPT from the AM. On first issuance the RPT is associated with no
          permissions and thus does not convey any authorizations for access.
          Once the requester obtains an RPT from the AM, it can ask the AM for
          authorization to have permissions associated with the RPT (see <xref
          target="r-am-authz-scope"/>).</t>

          <t>The requester performs a POST on the RPT endpoint. In doing so
          the requester MUST provide its own AAT in the header in order to
          gain access to the RPT endpoint.</t>

          <figure>
            <preamble>Example of a request message containing an
            AAT:</preamble>

            <artwork><![CDATA[POST /rpt HTTP/1.1
Host: am.example.com
Authorization: Bearer jwfLG53^sad$#f
Content-Type: application/json
...
]]></artwork>
          </figure>

          <t>The AM responds with an HTTP 201 (Created) status code and
          provides a new RPT.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/uma-rpt+json

{
  "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv"
}
]]></artwork>
          </figure>

          <t>If the content-type of the request is not recognized by the AM,
          the AM MUST produce an HTTP error.</t>

          <t>The requester might need an RPT if it has never before requested
          an RPT for this combination of requesting party, host, and AM, or if
          it has lost control of a previous issued RPT and needs a refreshed
          one. If the AAT provided in the header is the same as one provided
          for a previously issued RPT by this AM, the AM invalidates the old
          RPT and its permissions and issues a new RPT.</t>

          <t>If the request fails due to missing or invalid parameters, or is
          otherwise malformed, the AM SHOULD inform the requester of the error
          by sending an HTTP error response.</t>

          <t>If the request fails due to an invalid, missing, or expired AAT
          or requires higher privileges at this endpoint than provided by the
          AAT, the AM responds with an OAuth error (see <xref
          target="oauth-error-response"/>).</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
  error="invalid_token",
  error_description="The access token expired"
]]></artwork>
          </figure>
        </section>

        <section anchor="r-am-authz-scope"
                 title="Requester Asks for Authorization to Add Permission">
          <t>Once in possession of an AAT for this AM, an RPT that applies to
          this requesting party for this host and this AM, and a permission
          ticket, the requester asks the AM to give it a permission for the
          sought-for access. The requester performs a POST on the permission
          request endpoint at the AM, supplying the items below. In doing so
          the requester MUST provide its own AAT in order to gain access to
          the permission request endpoint. <list style="symbols">
              <t>The permission ticket it received from the host</t>

              <t>Its RPT for this host</t>

              <t>Its own AAT in the header</t>
            </list></t>

          <figure>
            <preamble>Example of a request message containing a permission
            ticket and RPT:</preamble>

            <artwork><![CDATA[POST /token_status HTTP/1.1
Host: am.example.com
Authorization: Bearer jwfLG53^sad$#f
Content-Type: application/json
...

{
 "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
 "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
}]]></artwork>
          </figure>

          <t>In this interaction, the requester uses the AM's permission
          request endpoint. The AM uses the ticket to look up the previously
          registered permission, maps the requested permission to operative
          user policies, undergoes any authorization flows required (see <xref
          target="authz-flows"/>), and ultimately responds to the request
          positively or negatively.</t>

          <t>If the request fails due to an invalid, missing, or expired AAT
          (or RPT) or requires higher privileges at this endpoint than
          provided by the AAT, the AM responds with an OAuth error (see <xref
          target="oauth-error-response"/>).</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
  error="invalid_token",
  error_description="The access token expired"
]]></artwork>
          </figure>

          <t>If the AM does not add the requested permission, it responds
          using the appropriate HTTP status code (typically 400 or 403), and
          includes one of the following error codes in the response (see <xref
          target="uma-error-response"/>): <list style="hanging">
              <t hangText="invalid_requester_ticket">The provided ticket was
              not found at the AM. The AM SHOULD respond with the HTTP 400
              (Bad Request) status code.</t>

              <t hangText="expired_requester_ticket">The provided ticket has
              expired. The AM SHOULD respond with the HTTP 400 (Bad Request)
              status code.</t>

              <t hangText="not_authorized_permission">The requester is
              definitively not authorized for this permission according to
              user policy. The AM SHOULD respond with the HTTP 403 (Forbidden)
              status code.</t>

              <t hangText="need_claims">The AM is unable to determine whether
              the requester is authorized for this permission without
              gathering claims from the requesting party. The AM SHOULD
              respond with the HTTP 403 (Forbidden) status code. The requester
              is therefore not authorized, but has the opportunity to engage
              the requesting party in a claims-gathering flow with the AM (see
              <xref target="authz-flows"/>) to potentially become
              authorized.</t>
            </list></t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/uma-status+json
Cache-Control: no-store
...

{
  "status": "error",
  "error": "expired_requester_ticket"
}
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="authz-flows" title="Claims-Gathering Flows">
        <t>The AM MUST base its decisions to add permissions to RPTs on user
        policies. The nature of these policies is outside the scope of UMA,
        but generally speaking, they can be thought of as either independent
        of requesting-party features (for example, time of day) or dependent
        on requesting-party features (for example, whether they are over 18).
        This latter case requires the requesting party to transmit identity
        claims to the AM in some fashion.</t>

        <t>The process for requesting and providing claims is extensible and
        may have a variety of dependencies on the type of requesting party
        (for example, natural person or legal person) and the type of
        requester application (for example, browser, native app, or
        autonomously running web service). UMA currently provides a framework
        for handling human-driven requester apps and an optional solution for
        gathering standardized claims from that end-user, and allows for
        extensions to support other solutions for this use case and other use
        cases. The AM SHOULD document its claims-handling ability in its
        configuration data through the claim_profiles_supported property (see
        <xref target="am-endpoints"/>). For the business-level and legal
        implications of different technical authorization flows, see <xref
        target="UMA-trustmodel"/>.</t>

        <section anchor="trusted-claims-human-driven"
                 title="Claims-Gathering Flow for Requester Apps Operated by End-Users">
          <t>A requester app, whether browser-based or native, is operated by
          a natural person (human end-user) in one of two typical
          situations:<list style="symbols">
              <t>The requesting party is a natural person (for example, a
              friend of the authorizing user); the requesting party may even
              be the authorizing user herself.</t>

              <t>The requesting party is a legal person such as a corporation,
              and the human being operating the requester app is acting as an
              agent of that legal person (for example, a customer support
              specialist representing a credit card company).</t>
            </list></t>

          <t>For convenience, this specification refers to the human end-user
          as a "requesting end-user" to cover both cases, which differ only at
          the level of business agreements (and potentially law), rather than
          technology. The AM has a variety of options at this point for
          satisfying the authorizing user's policy; this specification does
          not dictate a single answer. For example, the AM could require the
          requesting end-user to register for and/or log in to a local AM
          account, or to fill in a questionnaire, or to complete a purchase.
          It could even require several of these operations, where the order
          is significant.</t>

          <t>An end-user-driven requester app MUST redirect the end-user to
          the AM to complete the process of authorization. The redirection
          MUST include a URI query parameter with the name "ticket" whose
          value conveys the permission ticket for which the need_claims error
          was received; for example,
          "ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de". Each claim profile
          MUST provide the following capabilities:<list style="hanging">
              <t hangText="redirect URI">A means by which the requester MUST
              supply the URI to which the AM MUST redirect the requesting
              end-user at the end of the claims-gathering process.</t>

              <t hangText="callback URI">A means by which the requester
              OPTIONALLY supplies a callback URI for the AM to use.</t>

              <t hangText="state">A means by which the requester SHOULD supply
              an opaque value used to maintain state between the request and
              the callback; serves as a protection against XSRF attacks.</t>
            </list></t>

          <t>An AM MAY support any number of claim profiles. One potential
          such profile is defined in this specification: the "openid" claim
          profile, which leverages OpenID Connect for gathering generally
          useful user claims (see <xref target="trusted-claims"/>).</t>

          <section anchor="trusted-claims"
                   title="OpenID Connect Claim Profile">
            <t>If an AM supports the OpenID Connect claim profile, it MUST
            supply the "openid" value for one of its claim_profiles_supported
            values in its AM configuration data (see <xref
            target="am-endpoints"/> for how to formulate this data).</t>

            <t>To conform to this option, the AM MUST do the following:<list
                style="symbols">
                <t>Serve as a conforming OpenID Relying Party and Claims
                Client according to <xref target="OCStandard"/></t>

                <t>Be able to utilize at least all of the reserved claims
                defined in <xref target="OCMessages"/> in assessing policy and
                granting permissions</t>

                <t>Use the OpenID Connect "redirect_uri" and "state" request
                parameters as appropriate</t>
              </list></t>

            <t>The AM can then use any conforming OpenID Connect mechanisms
            and typical user interfaces for engaging with the UserInfo
            endpoints of OpenID Providers and Claims Providers, potentially
            allowing for the delivery of "trusted claims" (such as a verified
            email address or a date or birth) on which authorization policy
            may depend.</t>
          </section>
        </section>
      </section>
    </section>

    <section anchor="errors" title="Error Messages">
      <t>Ultimately the host is responsible for either granting the access the
      requester attempted, or returning an error response to the requester
      with a reason for the failure. <xref target="OAuth2"/> defines several
      error responses for a resource server to return. UMA makes use of these
      error responses, but requires the host to "outsource" the determination
      of some error conditions to the AM. UMA defines its own additional error
      responses that the AM may give to the host and requester as they
      interact with it, and that the host may give to the requester.</t>

      <section anchor="oauth-error-response" title="OAuth Error Responses">
        <t>When a client (host or requester) attempts to access one of the AM
        endpoints <xref target="am-endpoints"/> or a client (requester)
        attempts to access a protected resource at the host, it has to make an
        authenticated request by including an OAuth access token in the HTTP
        request as described in <xref target="OAuth2"/> Section 7.</t>

        <t>If the client's request failed authentication, the AM or the host
        responds with an OAuth error message as described throughout <xref
        target="protecting-a-resource"/> and <xref
        target="getting-authz-accessing-resource"/>.</t>
      </section>

      <section anchor="uma-error-response" title="UMA Error Responses">
        <t>When a client (host or requester) attempts to access one of the AM
        endpoints <xref target="am-endpoints"/> or a client (requester)
        attempts to access a protected resource at the host, if the client
        request is successfully authenticated by OAuth means, but is invalid
        for another reason, the AM or host responds with an UMA error response
        by adding the following properties to the entity body of the HTTP
        response using the "application/json" media type: <list
            style="hanging">
            <t hangText="error">REQUIRED. A single error code. Value for this
            property is defined in the specific AM endpoint description.</t>

            <t hangText="error_description">OPTIONAL. A human-readable text
            providing additional information, used to assist in the
            understanding and resolution of the error occurred.</t>

            <t hangText="error_uri">OPTIONAL. A URI identifying a
            human-readable web page with information about the error, used to
            provide the end-user with additional information about the
            error.</t>
          </list></t>

        <t>Common error codes: <list style="hanging">
            <t hangText="invalid_request">The request is missing a required
            parameter or is otherwise malformed. The AM MUST respond with the
            HTTP 400 (Bad Request) status code.</t>
          </list></t>

        <figure>
          <preamble>For example:</preamble>

          <artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/uma-status+json
Cache-Control: no-store
...

{
  "status": "error",
  "error": "invalid_request",
  "error_description": "There is already a resource with this identifier.",
  "error_uri": "http://am.example.com/errors/resource_exists"
}
]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="profiles" title="Specification of Additional Profiles">
      <t>This specification defines a selected set of profiles, but others
      will possibly be developed in the future. It is not possible for this
      specification to standardize all of these additional profiles. The
      following sections define rules for third parties that specify UMA
      profiles.</t>

      <t>(Get text from
      http://docs.oasis-open.org/security/saml/v2.0/saml-profiles-2.0-os.pdf
      .)</t>

      <t>(Put references to this section in the appropriate places above, and
      add a discussion of profiles somewhere in the intro.)</t>

      <section title="Specifying UMA Profiles">
        <t>This section provides a checklist of issues that MUST be addressed
        by each profile.</t>

        <t><list style="numbers">
            <t>Specify a URI that uniquely identifies the profile, postal or
            electronic contact information for the author, and provide
            reference to previously defined profiles that the new profile
            updates or obsoletes.</t>

            <t>Specify the set of interactions between parties involved in the
            profile. Any restrictions on applications used by each party and
            the protocols involved in each interaction must be explicitly
            called out.</t>

            <t>Identify the parties involved in each interaction, including
            how many parties are involved and whether intermediaries may be
            involved.</t>

            <t>Specify the method of authentication of parties involved in
            each interaction, including whether authentication is required and
            acceptable authentication types.</t>

            <t>Identify the level of support for message integrity, including
            the mechanisms used to ensure message integrity.</t>

            <t>Identify the level of support for confidentiality, including
            whether a third party may view the contents of UMA messages,
            whether the profile requires confidentiality, and the mechanisms
            recommended for achieving confidentiality.</t>

            <t>Identify the error states, including the error states at each
            participant, especially those that receive and process UMA
            messages.</t>

            <t>Identify security considerations, including analysis of threats
            and description of countermeasures.</t>

            <t>Identify relevant UMA metadata defined and/or utilized by the
            profile.</t>
          </list></t>
      </section>

      <section title="Specifying UMA Token Profiles">
        <t>This section provides a checklist of items that MUST in particular
        be addressed by attribute profiles.</t>

        <t><list style="numbers">
            <t>Specify a URI that uniquely identifies the profile, postal or
            electronic contact information for the author, and provide
            reference to previously defined profiles that the new profile
            updates or obsoletes.</t>

            <t>Identify the syntax and restrictions on the acceptable values
            for the token profile.</t>

            <t>Identify namespace restrictions that are meaningful in the
            profile deployment scenario.</t>

            <t>Identify rules in the processing of the fields within the token
            profile.</t>

            <t>Identify the scopes that are defined in the token profile (e.g.
            grant types in JWT Bearer Token Profile).</t>

            <t>Identify the error states, including the error states at each
            participant, especially those that receive and process claims or
            assertions expressed within the tokens.</t>
          </list></t>
      </section>
    </section>

    <section title="Security Considerations">
      <t>This specification relies mainly on OAuth security mechanisms for
      protecting the host registration endpoint at the AM so that only a
      properly authorized host can access it on behalf of the intended user.
      For example, the host needs to use a valid protection API token (PAT)
      issued through a user authorization process at the endpoint, and the
      interaction SHOULD take place over TLS. It is expected that the host
      will protect its client secret (if it was issued one) and its PAT,
      particularly if used in "bearer token" fashion.</t>

      <t>In addition, this specification dictates a binding between the PAT
      and the host-specific registration area on the AM to prevent a host from
      interacting with a registration area not its own.</t>

      <t>This specification defines a number of JSON-based data formats. As a
      subset of the JavaScript scripting language, JSON data SHOULD be
      consumed through a process that does not dynamically execute it as code,
      to avoid malicious code execution. One way to achieve this is to use a
      JavaScript interpreter rather than the built-in JavaScript eval()
      function.</t>

      <t>For information about the technical, operational, and legal elements
      of trust establishment between UMA entities and parties, which affects
      security considerations, see <xref target="UMA-trustmodel"/>.</t>
    </section>

    <section title="Privacy Considerations">
      <t>The AM comes to be in possession of resource set information (such as
      names and icons) that may reveal information about the user, which the
      AM's trust relationship with the host is assumed to accommodate.
      However, the requester is a less-trusted party (in fact, entirely
      untrustworthy until it acquires permissions for an RPT in UMA protocol
      phase 2. This specification recommends obscuring resource set
      identifiers in order to avoid leaking personally identifiable
      information to requesters through the "scope" mechanism.</t>

      <t>For information about the technical, operational, and legal elements
      of trust establishment between UMA entities and parties, which affects
      privacy considerations, see <xref target="UMA-trustmodel"/>.</t>
    </section>

    <section anchor="conformance" title="Conformance">
      <t>This section outlines conformance requirements for various entities
      implementing UMA endpoints.</t>

      <t>This specification has dependencies on other specifications, as
      follows:<list style="symbols">
          <t>OAuth 2.0: AMs, hosts, and requesters MUST support <xref
          target="OAuth2"/> features named in this specification for
          conformance. For example, AMs MUST support the authorization_code
          and client_credentials grant types.</t>

          <t>hostmeta: AMs, hosts, and requesters MUST support the <xref
          target="RFC6415"/> features named in this specification.</t>

          <t>OpenID Connect: AMs MAY support <xref target="DynClientReg"/>,
          and MAY choose to conform to the "openid" claim format option,
          corresponding to the OpenID Connect RP role defined in <xref
          target="OCStandard"/> and support for OpenID Connect reserved claims
          defined in <xref target="OCMessages"/>.</t>
        </list></t>

      <t>The AM's configuration data provides a machine-readable method for an
      AM to indicate certain of the conformance options it has chosen. Several
      of the data properties allow for extensibility. Where this specification
      does not already require optional features to be documented, it is
      RECOMMENDED that AM developers and deployers document any profiled or
      extended features explicitly and use configuration data to indicate
      their usage. See <xref target="am-endpoints"/> for information about
      providing and extending AM configuration data.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>Several UMA-specific JSON-based media types are being proposed, as
      follows: (TBS)</t>
    </section>

    <section anchor="resource-reg-example"
             title="Example of Registering Resource Sets">
      <t>The following example illustrates the intent and usage of resource
      set descriptions and scope descriptions as part of resource set
      registration.</t>

      <t>This example contains some steps that are exclusively in the realm of
      user experience rather than web protocol, to achieve realistic
      illustration. These steps are labeled "User experience only". Some other
      steps are exclusively internal to the operation of the entity being
      discussed. These are labeled "Internal only".</t>

      <t>An authorizing user, Alice Adams, has just uploaded a photo of her
      new puppy to a host, Photoz.example.com, and wants to ensure that this
      specific photo is not publicly accessible.</t>

      <t>Alice has already introduced this host to her AM,
      CopMonkey.example.com, and thus Photoz has already obtained a PAT from
      CopMonkey. However, Alice has not previously instructed Photoz to use
      CopMonkey to protect any other photos of hers.</t>

      <t>Alice has previously visited CopMonkey to map a default "do not share
      with anyone" policy to any resource sets registered by Photoz, until
      such time as she maps some other more permissive policies to those
      resources. (User experience only. This may have been done at the time
      Alice introduced the host to the AM, and/or it could have been a global
      or host-specific preference setting. A different constraint or no
      constraint at all might be associated with newly protected resources.)
      Other kinds of policies she may eventually map to particular photos or
      albums might be "Share only with husband@email.example.net" or "Share
      only with people in my 'family' group".</t>

      <t>Photoz itself has a publicly documented application-specific API that
      offers two dozen different methods that apply to single photos, such as
      "addTags" and "getSizes", but rolls them up into two photo-related
      scopes of access: "view" (consisting of various read-only operations)
      and "all" (consisting of various reading, editing, and printing
      operations). It defines two scope descriptions that represent these
      scopes, which it is able to reuse for all of its users (not just Alice),
      and ensures that these scope description documents are available through
      HTTP GET requests that may be made by AMs.</t>

      <t>The "name" property values are intended to be seen by Alice when she
      maps authorization constraints to specific resource sets and actions
      while visiting CopMonkey, such that Alice would see the strings "View
      Photo and Related Info" and "All Actions", likely accompanied by the
      referenced icons, in the CopMonkey interface. (Other users of Photoz
      might similarly see the same labels at CopMonkey or whatever other AM
      they use. Photoz could distinguish natural-language labels per user if
      it wishes, by pointing to scopes with differently translated names.)</t>

      <t>Example of the viewing-related scope description document available
      at http://photoz.example.com/dev/scopes/view with a Content-Type of
      application/uma-scope+json:</t>

      <figure>
        <artwork><![CDATA[
{
  "name": "View Photo and Related Info",
  "icon_uri": "http://www.example.com/icons/reading-glasses.png"
}
]]></artwork>
      </figure>

      <t>Example of the broader scope description document available at
      http://photoz.example.com/dev/scopes/all, likewise with a Content-Type
      of application/uma-scope+json:</t>

      <figure>
        <artwork><![CDATA[
{
  "name": "All Actions",
  "icon_uri": "http://www.example.com/icons/galaxy.png"
}
]]></artwork>
      </figure>

      <t>While visiting Photoz, Alice selects a link or button that instructs
      the site to "Protect" or "Share" this single photo (user experience
      only; Photoz could have made this a default or preference setting).</t>

      <t>As a result, Photoz defines for itself a resource set that represents
      this photo (internal only; Photoz is the only application that knows how
      to map a particular photo to a particular resource set). Photoz also
      prepares the following resource set description, which is specific to
      Alice and her photo. The "name" property value is intended to be seen by
      Alice in mapping authorization policies to specific resource sets and
      actions when she visits CopMonkey. Alice would see the string "Steve the
      puppy!", likely accompanied by the referenced icon, in the CopMonkey
      interface. The possible scopes of access on this resource set are
      indicated with URI references to the scope descriptions, as shown just
      above.</t>

      <figure>
        <artwork><![CDATA[
{
  "name": "Steve the puppy!",
  "icon_uri": "http://www.example.com/icons/flower",
  "scopes": [
    "http://photoz.example.com/dev/scopes/view",
    "http://photoz.example.com/dev/scopes/all"
  ]
}
]]></artwork>
      </figure>

      <t>Photoz uses the "create resource set description" method of
      CopMonkey's standard UMA resource set registration API, presenting its
      Alice-specific PAT there, to register and assign an identifier to the
      resource set description.</t>

      <figure>
        <artwork><![CDATA[
PUT /resource_set/112210f47de98100 HTTP/1.1
Content-Type: application/uma-resource-set+json
...

{
  "name": "Steve the puppy!",
  "icon_uri": "http://www.example.com/icons/flower.png",
  "scopes": [
    "http://photoz.example.com/dev/scopes/view",
    "http://photoz.example.com/dev/scopes/all"
  ]
}
]]></artwork>
      </figure>

      <t>If the registration attempt succeeds, CopMonkey responds in the
      following fashion.</t>

      <figure>
        <artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/uma-status+json
ETag: "1"
...

{
  "status": "created",
  "_id":  "112210f47de98100",
  "_rev": "1"
}
]]></artwork>
      </figure>

      <t>At the time Alice indicates she would like this photo protected,
      Photoz can choose to redirect Alice to CopMonkey for further policy
      setting, access auditing, and other AM-related tasks (user experience
      only).</t>

      <t>Once it has successfully registered this description, Photoz is
      responsible for outsourcing to CopMonkey all questions of authorization
      for access attempts made to this photo.</t>

      <t>Over time, as Alice uploads other photos and creates and organizes
      photo albums, and as Photoz makes new action functionality available,
      Photoz can use additional methods of the resource set registration API
      to ensure that CopMonkey's understanding of Alice's protected resources
      matches its own.</t>

      <t>For example, if Photoz suspects that somehow its understanding of the
      resource set has gotten out of sync with CopMonkey's, it can ask to read
      the resource set description as follows.</t>

      <figure>
        <artwork><![CDATA[
GET /resource_set/112210f47de98100 HTTP/1.1
Host: am.example.com
...
]]></artwork>
      </figure>

      <t>CopMonkey responds with the full content of the resource set
      description, including its _id and its current _rev, as follows:</t>

      <figure>
        <preamble>Example of an HTTP response to a "read resource set
        description" request, containing a resource set description from the
        AM:</preamble>

        <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/uma-resource-set+json
ETag: "1"
...

{
  "_id":  "112210f47de98100",
  "_rev": "1",
  "name": "Photo album",
  "icon_uri": "http://www.example.com/icons/flower.png",
  "scopes": [
    "http://photoz.example.com/dev/scopes/view",
    "http://photoz.example.com/dev/scopes/all"
  ]
}
]]></artwork>
      </figure>

      <t>If for some reason Photoz and CopMonkey have gotten dramatically out
      of sync, Photoz can ask for the list of resource set identifiers
      CopMonkey currently knows about:</t>

      <figure>
        <artwork><![CDATA[
GET /resource_set HTTP/1.1
Host: am.example.com
...
]]></artwork>
      </figure>

      <t>CopMonkey's response might look as follows:</t>

      <figure>
        <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
...

[ "112210f47de98100", "34234df47eL95300" ]
]]></artwork>
      </figure>

      <t>If Alice later changes the photo's title (user experience only) on
      Photoz from "Steve the puppy!" to "Steve on October 14, 2011", Photoz
      would use the "update resource set description" method to ensure that
      Alice's experience of policy-setting at CopMonkey remains consistent
      with what she sees at Photoz. Following is an example of this
      request.</t>

      <figure>
        <artwork><![CDATA[
PUT /resource_set/112210f47de98100 HTTP/1.1
Content-Type: application/uma-resource-set+json
Host: am.example.com
If-Match: "1"
...

{
  "name": "Steve on October 14, 2011",
  "icon_uri": "http://www.example.com/icons/flower.png",
  "scopes": [
    "http://photoz.example.com/dev/scopes/view",
    "http://photoz.example.com/dev/scopes/all"
  ]
}
]]></artwork>
      </figure>

      <t>CopMonkey would respond as follows.</t>

      <figure>
        <artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/uma-status+json
ETag: "2"
...

{
  "status": "updated",
  "_id":  "112210f47de98100",
  "_rev": "2"
}
]]></artwork>
      </figure>

      <t>There are other reasons Photoz might want to update resource set
      descriptions, having nothing to do with Alice's actions or wishes. For
      example, it might extend its API to include new features, and want to
      add new scopes to all of Alice's and other users' resource set
      descriptions.</t>

      <t>if Alice later decides to entirely remove sharing protection (user
      experience only) on this photo while visiting Photoz, ensuring that the
      public can get access without any UMA-based protection, Photoz is
      responsible for deleting the relevant resource set registration, as
      follows:</t>

      <figure>
        <artwork><![CDATA[
DELETE /resource_set/112210f47de98100 HTTP/1.1
Host: am.example.com
If-Match: "2"
...
]]></artwork>
      </figure>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The current editor of this specification is Thomas Hardjono of MIT.
      The following people are co-authors:<list style="symbols">
          <t>Paul C. Bryan, ForgeRock US, Inc. (former editor)</t>

          <t>Domenico Catalano, Oracle Corp.</t>

          <t>George Fletcher, AOL</t>

          <t>Maciej Machulak, Newcastle University</t>

          <t>Eve Maler, XMLgrrl.com</t>

          <t>Lukasz Moren, Newcastle University</t>

          <t>Christian Scholz, COMlounge GmbH (former editor)</t>

          <t>Jacek Szpot, Newcastle University</t>
        </list></t>

      <t>Additional contributors to this specification include the Kantara UMA
      Work Group participants, a list of whom can be found at <xref
      target="UMAnitarians"/>.</t>
    </section>

    <section title="Issues">
      <t>All issues are now captured at the project's GitHub site (<eref
      target="https://github.com/xmlgrrl/UMA-Specifications/issues"/>).</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>

      <reference anchor="OAuth2"
                 target="http://tools.ietf.org/html/draft-ietf-oauth-v2">
        <front>
          <title>The OAuth 2.0 Protocol</title>

          <author initials="E." surname="Hammer-Lahav">
            <organization>IETF</organization>
          </author>

          <date day="22" month="September" year="2011"/>
        </front>
      </reference>

      <reference anchor="OAuth-bearer"
                 target="http://tools.ietf.org/html/draft-ietf-oauth-v2-bearer">
        <front>
          <title>The OAuth 2.0 Authorization Protocol: Bearer Tokens</title>

          <author fullname="M. Jones">
            <organization/>
          </author>

          <date day="12" month="March" year="2012"/>
        </front>
      </reference>

      <reference anchor="OAuth-SAML"
                 target="http://tools.ietf.org/html/draft-ietf-oauth-saml2-bearer">
        <front>
          <title>SAML 2.0 Bearer Assertion Grant Type Profile for OAuth
          2.0</title>

          <author initials="B." surname="Campbell">
            <organization>Campbell</organization>
          </author>

          <date month="August" year="2011"/>
        </front>
      </reference>

      <reference anchor="RFC6415" target="http://tools.ietf.org/html/rfc6415">
        <front>
          <title>Web Host Metadata</title>

          <author initials="E." surname="Hammer-Lahav">
            <organization>Yahoo!</organization>
          </author>

          <date day="" month="October" year="2011"/>
        </front>
      </reference>

      &RFC4627;

      <reference anchor="DynClientReg"
                 target="https://datatracker.ietf.org/doc/draft-ietf-oauth-dyn-reg/">
        <front>
          <title>OAuth Dynamic Client Registration Protocol</title>

          <author initials="T." surname="Hardjono">
            <organization>IETF</organization>
          </author>

          <date day="23" month="May" year="2012"/>
        </front>
      </reference>

      <reference anchor="OCMessages"
                 target="http://openid.net/specs/openid-connect-messages-1_0.html">
        <front>
          <title>OpenID Connect Messages 1.0</title>

          <author initials="N." surname="Sakimura">
            <organization/>
          </author>

          <date day="30" month="September" year="2011"/>
        </front>
      </reference>

      <reference anchor="OCStandard"
                 target="http://openid.net/specs/openid-connect-standard-1_0.html">
        <front>
          <title>OpenID Connect Standard 1.0</title>

          <author initials="N." surname="Sakimura">
            <organization/>
          </author>

          <date day="30" month="September" year="2011"/>
        </front>
      </reference>

      <reference anchor="UMA-trustmodel"
                 target="http://kantarainitiative.org/confluence/display/uma/UMA+Trust+Model">
        <front>
          <title>UMA Trust Model</title>

          <author initials="E." surname="Maler">
            <organization/>
          </author>

          <date day="20" month="April" year="2012"/>
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <reference anchor="UMA-usecases"
                 target="http://kantarainitiative.org/confluence/display/uma/UMA+Scenarios+and+Use+Cases">
        <front>
          <title>UMA Scenarios and Use Cases</title>

          <author initials="E." surname="Maler">
            <organization>Kantara</organization>
          </author>

          <date month="October" year="2010"/>
        </front>
      </reference>

      <reference anchor="UMA-userstories"
                 target="http://kantarainitiative.org/confluence/display/uma/User+Stories">
        <front>
          <title>UMA User Stories</title>

          <author initials="E." surname="Maler">
            <organization/>
          </author>

          <date month="November" year="2010"/>
        </front>
      </reference>

      <reference anchor="UMAnitarians"
                 target="http://kantarainitiative.org/confluence/display/uma/Participant+Roster">
        <front>
          <title>UMA Participant Roster</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date year="2012"/>
        </front>
      </reference>
    </references>

    <section anchor="History" title="Document History">
      <t>NOTE: To be removed by RFC editor before publication as an RFC.</t>

      <t>From I-D rev 03 to rev 04, the following major changes have been
      made:<list style="symbols">
          <t>The requirement to support the client_credentials flow has been
          removed.</t>

          <t>The requester access token has been split into two tokens, and
          all of the tokens have been renamed. The host access token is now
          the PAT. The requester access token used at the AM's API is now the
          AAT, and consists of vanilla OAuth. The requester access token used
          at the host is now the RPT.</t>

          <t>The token and user authorization endpoints for the different APIs
          at the AM have been joined together, and are now distinguished
          through the "http://docs.kantarainitiative.org/uma/scopes/prot.json"
          scope (for the protection API) and the
          "http://docs.kantarainitiative.org/uma/scopes/authz.json" scope (for
          the authorization API).</t>

          <t>The token status description format and JSON media type, and the
          RPT/permission delivery response, have been updated to reflect the
          RPT naming.</t>

          <t>The configuration data format has changed to reflect the changes
          above.</t>

          <t>The Phase 2/3 flow has changed and been simplified to match the
          requirements of the new AAT and RPT.</t>

          <t>Token types are now called token profiles, and this is reflected
          in the configuration parameter names. Claim types are now called
          claim profiles, and this is also reflected in the configuration
          parameter name.</t>

          <t>The requester now asks for permission in a back-channel
          interaction, and the AM now produces a need_claims error that
          instructs the requester to use a claims-gathering flow (renamed from
          "authorization flow").</t>

          <t>Named subsections for token and claim profiles have been added so
          that they show up in the TOC.</t>
        </list></t>

      <t>From I-D rev 04 to rev 05, the following major changes have been
      made:<list style="symbols">
          <t>The RPT-getting flow and the permission-requesting flow have been
          separated back out, with two distinct endpoints, RPT and permission
          request.</t>

          <t>The configuration data format has changed to reflect the changes
          above.</t>
        </list></t>
    </section>
  </back>
</rfc>
