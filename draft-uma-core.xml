<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc PUBLIC "-//IETF//DTD RFC 2629//EN"
"http://xml.resource.org/authoring/rfc2629.dtd" [
<!ENTITY RFC2119 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2617 PUBLIC "" "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml">
<!ENTITY UMA PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/Home">
<!ENTITY UMAreqs PUBLIC "" "http://kantarainitiative.org/confluence/display/uma/UMA+Requirements">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY RFC4627 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml">
]>
<rfc category="std" docName="draft-hardjono-oauth-umacore-06B"
     ipr="trust200902">
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

  <?rfc toc='yes' ?>

  <?rfc tocdepth='4' ?>

  <?rfc symrefs='yes' ?>

  <?rfc sortrefs='yes' ?>

  <?rfc compact='yes' ?>

  <?rfc subcompact='no' ?>

  <front>
    <title abbrev="UMA Core Protocol">User-Managed Access (UMA) Core
    Protocol</title>

    <author fullname="Thomas Hardjono" initials="T" role="editor"
            surname="Hardjono">
      <organization>MIT</organization>

      <address>
        <email>hardjono@mit.edu</email>
      </address>
    </author>

    <date day="17" month="December" year="2012" />

    <abstract>
      <t>User-Managed Access (UMA) is a profile of OAuth 2.0. UMA defines how
      resource owners can control access to their protected resources made by
      clients operated by arbitrary rquesting parties, where the resources
      reside on any number of resource servers, and where a centralized
      authorization server governs access based on resource owner policy.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>User-Managed Access (UMA) is a profile of OAuth 2.0 <xref
      target="OAuth2"></xref>. UMA defines how resource owners can control
      access to their protected resources made by clients operated by
      arbitrary requesting parties, where the resources reside on any number
      of resource servers, and where a centralized authorization server
      governs access based on resource owner policy.</t>

      <t>UMA serves numerous use cases where a resource owner outsources
      authorization for access to their resources, potentially even without
      the run-time presence of the resource owner. A typical example is the
      following: a web user (an end-user resource owner) can authorize a web
      app (client) to gain one-time or ongoing access to a protected resource
      containing his home address stored at a "personal data store" service
      (resource server), by telling the resource server to respect access
      entitlements issued by his authorization service (authorization server).
      The requesting party operating the client might be the resource owner
      himself, using a web or native app run by an e-commerce company that
      needs to know where to ship a purchased item, or it might be his friend
      who is using an online address book service to collect contact
      information, or it might be a survey company that uses an autonomous web
      service to compile population demographics. A variety of scenarios and
      use cases can be found in <xref target="UMA-usecases"></xref> and <xref
      target="UMA-casestudies"></xref>.</t>

      <t>Practical control of access among loosely coupled parties requires
      more than just messaging protocols. This specification defines only the
      technical "contract" between UMA-conforming entities; its companion
      Binding Obligations specification <xref target="UMA-obligations"></xref>
      defines the expected behaviors of parties operating and using these
      entities. Parties operating entities that claim to be UMA-conforming
      MUST provide documentation affirmatively stating their acceptance of the
      binding obligations contractual framework defined in the Binding
      Obligations specification.</t>

      <t>In enterprise settings, application access management often involves
      letting back-office applications serve only as policy enforcement points
      (PEPs), depending entirely on access decisions coming from a central
      policy decision point (PDP) to govern the access they give to
      requesters. This separation eases auditing and allows policy
      administration to scale in several dimensions. UMA makes use of a
      separation similar to this, letting the resource owner serve as a policy
      administrator crafting authorization strategies for resources under
      their control.</t>

      <t>The UMA protocol can be considered an advanced profile of <xref
      target="OAuth2"></xref>. In order to increase interoperable
      communication among the authorization server, resource server, and
      client, it defines several purpose-built APIs related to the outsourcing
      of authorization, themselves protected by OAuth in embedded fashion.</t>

      <t>The UMA protocol has three broad phases, as shown in <xref
      target="UMA-phases"></xref>.</t>

      <figure align="center" anchor="UMA-phases">
        <preamble>The Three Phases of the UMA Protocol</preamble>

        <artwork align="left"><![CDATA[                                           +--------------+
                                           |   resource   |
          +---------manage (A)------------ |     owner    |
          |                                +--------------+
          |         Phase 1:                      |
          |         protect a                control (B)
          |         resource                      |
          v                                       v
   +------------+               +----------+--------------+
   |            |               |protection|              |
   |  resource  |               |   API    | authorization|
   |   server   |<-protect (C)--| (*needs  |    server    |
   |            |               |   PAT)   |              |
   +------------+               +----------+--------------+
   | protected  |                          | authorization|
   | resource   |                          |     API      |
   |(*needs RPT)|                          | (*needs AAT) |
   +------------+                          +--------------+
          ^                                      |
          |         Phases 2 and 3:         authorize (D)
          |         get authz and                |
          |         access a resource            v
          |                                +--------------+
          +---------access (E)-------------|    client    |
                                           +--------------+

                                         (requesting party)]]></artwork>
      </figure>

      <t>In broad strokes, the phases are as follows:<list style="numbers">
          <t>Protect a resource (described in <xref
          target="protecting-a-resource"></xref>).</t>

          <t>Get authorization (described in <xref
          target="getting-authz-accessing-resource"></xref>).</t>

          <t>Access a resource (described along with Phase 2 in <xref
          target="getting-authz-accessing-resource"></xref>).</t>
        </list></t>

      <t>In more detail, the phases work as follows: <list style="numbers">
          <t><spanx>Protect a resource:</spanx> This phase accomplishes trust
          establishment among the resource owner, resource server, and
          authorization server, as well as enabling the resource server to
          register with the authorization server descriptions of the resources
          to be protected. This specification uses <xref
          target="OAuth-resource-reg"></xref> to enable dynamic introduction
          and resource registration. In these circumstances, where the
          resource owner has chosen to use a resource server for managing
          online resources ("A"), the resource owner introduces this resource
          server to an authorization server using an OAuth-mediated
          interaction that results in the authorization server giving the
          resource server a protection API token (PAT). The resource server
          then uses the authorization server's protection API to register sets
          of resources for which protection is being outsourced ("C"). (Out of
          band of the UMA protocol, the resource owner instructs the
          authorization server what policies to associated with the registered
          resource sets ("B").)</t>

          <t><spanx>Get authorization:</spanx> This phase involves the client
          (along with its operator, the "requesting party") for the first
          time. The client approaches the resource server seeking access to a
          protected resource ("E"). In order to access it, the client must
          first obtain a requester permission token (RPT) from the
          authorization server on behalf of its requesting party. The client
          and requesting party are then redirected to the authorization server
          to ask for appropriate authorization data (the form of this data
          depends on the UMA token profile in use). In doing so, the
          requesting party must demonstrate to the authorization server that
          it satisfies the resource owner's policy governing the sought-for
          resource and scope ("D"). To use the authorization server's
          authorization API in the first place, the requesting party has to
          agree to communication with this server for the purpose of seeking
          authorization, which results in the client obtaining an
          authorization API token (AAT).</t>

          <t><spanx>Access a resource:</spanx> This phase involves the client
          successfully presenting an RPT that has sufficient authorization
          data associated with it to the resource server in order to gain
          access to the desired resource ("E"). In this sense, it is the
          "happy path" within phase 2.</t>
        </list></t>

      <t>In deploying UMA, implementers are expected to develop one or more
      UMA profiles (described in <xref target="profiles"></xref>) that specify
      and restrict the various UMA protocol options, according to the
      deployment conditions.</t>

      <section title="Notational Conventions">
        <t>The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT',
        'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this
        document are to be interpreted as described in <xref
        target="RFC2119"></xref>.</t>

        <t>Unless otherwise noted, all the protocol properties and values are
        case sensitive.</t>
      </section>

      <section anchor="terminology" title="Basic Terminology">
        <t>UMA introduces the following new terms and enhancements of OAuth
        term definitions.<list hangIndent="6" style="hanging">
            <t hangText="resource owner"><vspace />The "user" in User-Managed
            Access; an OAuth resource owner. This is typically an end-user (a
            natural person) but it can also be a corporation or other legal
            person.</t>

            <t hangText="requesting party"><vspace />An end-user, or a
            corporation or other legal person, that uses a client to seek
            access to a protected resource. The requesting party may or may
            not be the same party as the resource owner.</t>

            <t hangText="client"><vspace />An application making protected
            resource requests with the resource owner's authorization and on
            the requesting party's behalf.</t>

            <t hangText="claim"><vspace />A statement of the value or values
            of one or more identity attributes of a requesting party. A
            requesting party may need to provide claims to an authorization
            server in order to satisfy policy and gain permission for access
            to a protected resource.</t>

            <t hangText="resource set">A set of one or more protected
            resources. In authorization policy terminology, a resource set is
            the "object" being protected.</t>

            <t hangText="scope type">A bounded extent of access that is
            possible to perform on a resource set. In authorization policy
            terminology, a scope type is one of the potentially many "verbs"
            that can logically apply to a resource set ("object"). UMA
            associates scope types with labeled resource sets.</t>

            <t hangText="authorization data">Data associated with a requester
            permission token that enables some combination of the
            authorization server and resource server to determine the correct
            extent of access to allow to a client. Authorization data is a key
            part of the definition of an UMA token profile.</t>

            <t hangText="permission">A scope of access over a particular
            resource set at a particular resource server that is being asked
            for by, or being granted to, a requesting party. In authorization
            policy terminology, a permission includes a "subject" (requesting
            party), "verbs" (one or more scopes of access), and an "object"
            (resource set). A permission is one example of authorization
            data.</t>

            <t hangText="permission ticket">A correlation handle that is
            conveyed from an authorization server to a resource server, from a
            resource server to a client, and ultimately from a client to an
            authorization server, to enable the authorization server to assess
            the correct resource owner policies to apply to an access
            request.</t>
          </list></t>
      </section>

      <section anchor="endpoint-discussion"
               title="Endpoints, Endpoint Protection, and Tokens">
        <t>Various UMA entities present protected APIs for other entities to
        use. These APIs are as follows:<list style="symbols">
            <t>The authorization server presents a <spanx>protection API</spanx>
            to the resource server, which encompasses the resource
            registration API defined by the OAuth introduction specification
            <xref target="OAuth-resource-reg"></xref>, as well as additional
            functions standardized by this specification. This API is
            OAuth-protected, requiring a resource server to obtain from the
            authorization server an OAuth access token called a <spanx>protection API token (PAT)</spanx>.</t>

            <t>The authorization server presents an <spanx>authorization API</spanx>
            to the client, as defined wholly by this specification. This API
            is OAuth-protected, requiring a client and its requesting party to
            obtain from the authorization server an OAuth access token,
            referred to in this specification as an <spanx>authorization API token (AAT)</spanx>
            to distinguish it from other tokens with other purposes.</t>

            <t>The resource server presents a <spanx>protected resource</spanx>
            to the client, which can be considered an application-specific or
            proprietary API. This API is protected by the UMA profile of
            OAuth, requiring a client to obtain from the authorization server
            an OAuth access token, referred to in this specification as a
            <spanx>requester permission token (RPT)</spanx> to distinguish it
            from other tokens with other purposes.</t>
          </list></t>

        <t>The authorization server presents standard OAuth endpoints for
        token issuance and resource owner authorization in protecting its own
        UMA APIs, as follows. Resource servers asking to use the protection
        API would be issued a PAT. Clients and requesting parties asking to
        use the authorization API would be issued an AAT.<list hangIndent="6"
            style="hanging">
            <t hangText="token endpoint">Part of standard OAuth, as profiled
            by UMA. The endpoint at which the resource server asks for a PAT
            on the resource owner's behalf. Also the endpoint at which the
            client asks for an AAT on the requesting party's behalf. (The
            authorization server may also choose to issue a refresh token.)
            This specification makes the OAuth token profile "bearer"
            mandatory for the authorization server to implement. It can
            declare its ability to handle other token profiles.</t>

            <t hangText="user authorization endpoint">Part of standard OAuth,
            as profiled by UMA; used when the authorization code grant type
            (REQUIRED for the authorization server to implement) is being
            used. The endpoint to which the resource server redirects an
            end-user resource owner to authorize the former to use this
            authorization server in outsourcing resource protection. Also the
            endpoint to which the client redirects the end-user requesting
            party to authorize the former to use this authorization server in
            seeking access.</t>
          </list></t>

        <t>The authorization server presents the following endpoints to the
        resource server as part of its protection API; these endpoints MUST be
        OAuth-protected and require a PAT for access, for which the
        "http://docs.kantarainitiative.org/uma/scopes/prot.json" OAuth scope
        is required:<list hangIndent="6" style="hanging">
            <t hangText="resource set registration endpoint">The endpoint at
            which the resource server registers resource sets it wants the
            authorization server to protect, as defined by <xref
            target="OAuth-resource-reg"></xref>. The
            "http://docs.kantarainitiative.org/uma/scopes/prot.json" scope is
            a superset of the scope that governs usage of the resource set
            registration endpoint.</t>

            <t hangText="permission registration endpoint">The endpoint at
            which the resource server registers permissions that it
            anticipates a client will shortly be asking for from the
            authorization server.</t>

            <t hangText="introspection endpoint">The endpoint at which the
            resource server forwards an RPT that has accompanied an access
            request to learn what authorization data is associated with it, as
            defined by <xref target="OAuth-introspection"></xref>. This
            specification defines an UMA token profile, "bearer", which is
            mandatory for the authorization server to implement and which, if
            used, REQUIRES the resource server to use this endpoint (see <xref
            target="h-am-rpt-status"></xref>). The
            "http://docs.kantarainitiative.org/uma/scopes/prot.json" scope is
            a superset of the scope that governs usage of the token
            introspection endpoint.</t>
          </list></t>

        <t>The authorization server presents the following endpoints to the
        client as part of its authorization API; these endpoints are
        OAuth-protected and require an AAT for access, for which the
        "http://docs.kantarainitiative.org/uma/scopes/authorization" OAuth
        scope is required:<list hangIndent="6" style="hanging">
            <t hangText="RPT endpoint">The endpoint at which the client asks
            the authorization server for the issuance of an RPT relating to
            this requesting party, resource server, and authorization
            server.</t>

            <t hangText="permission request endpoint">The endpoint at which
            the client asks for authorization data to be associated with an
            RPT to enable authorized access.</t>
          </list></t>

        <t>The resource server presents one or more protected resource
        endpoints to the client; these endpoints are protected by the UMA
        profile of OAuth and require an RPT with sufficient authorization data
        to permit access:<list hangIndent="6" style="hanging">
            <t hangText="protected resource endpoint">An application-specific
            endpoint at which a client attempts to access resources. This can
            be a singular API endpoint, one of a set of API endpoints, a URI
            corresponding to an HTML document, or any other URI.</t>
          </list></t>

        <t>The authorization server has the opportunity to manage the validity
        periods of the access tokens, the corresponding refresh tokens where
        applicable, and even the client credentials that it issues. Different
        lifetime strategies may be suitable for different resources and scopes
        of access, and the authorization server has the opportunity to give
        the resource owner control through policy. These options are all
        outside the scope of this specification.</t>
      </section>

      <section anchor="scope-discussion"
               title="Scope Types, Resource Sets, Permissions, and Authorization">
        <t>UMA extends the OAuth concept of a "scope" by defining scope types
        as applying to labeled resource sets, rather than leaving the relevant
        resources (such as API endpoints or URIs) implicit. A resource set can
        have any number of scope types, which together describe the universe
        of actions that <spanx>can be</spanx> taken on this protected resource
        set. For example, a resource set representing a status update API
        might have scopes that include adding an update or reading updates. A
        resource set representing a photo album might have scopes that include
        viewing a slideshow or printing the album. Resource servers register
        resource sets and their scope types when there is not yet any
        particular requesting party or client in the picture.</t>

        <t>Resource sets and scope types have meaning only to resource servers
        and their users, in the same way that application-specific protected
        resource APIs have meaning only to these entities. The authorization
        server is merely a conveyor of labels and descriptions for these
        constructs, to help the resource owner set policies that guide
        eventual authorization processes.</t>

        <t>A permission, in contrast to a scope type, reflects an <spanx>actual</spanx>
        entitlement to access a resource set using one or more scope types, as
        the result of an authorization process undergone by a specific
        requesting party. A resource server registers a permission request
        with an authorization server on behalf of a client (and its requesting
        partie) that has attempted access, and transmits the resulting
        permission ticket to the client. The client subsequently asks the
        authorization server for authorization data to be associated with its
        RPT. If the UMA token profile is in use, the authorization server
        grants (or denies) the permission to the requesting party. (If another
        token profile is in use, the authorization server might generate a
        different type of authorization data, such as an authorization
        decision or a package of the claims it has collected.)</t>

        <t>An RPT is bound to a requesting party, the client being used by
        that party, the resource server at which protected resources of
        interest reside, and the authorization server that protects those
        resources. It becomes associated with as many pieces of authorization
        data as are appropriate for gaining authorized access to resources
        protected at that resource server by any single authorization server
        (even if that data applies to resources managed by two or more
        different resource owners at the same resource server using the same
        authorization server).</t>

        <t>In the case of the UMA "bearer" token profile, each individual
        permission is associated with the resource owner whose policies drove
        the authorization process. This enables meaningful, auditable, and
        potentially legally enforceable authorization for access (see <xref
        target="UMA-obligations"></xref>). Permissions have a validity period
        that the authorization server has the opportunity to control
        (independently or with input from the resource owner). These control
        options are outside the scope of this specification.</t>
      </section>

      <section anchor="am-endpoints"
               title="Authorization Server Configuration Data">
        <t>The authorization server MUST provide configuration data to other
        entities it interacts with in a<xref format="default"
        target="RFC4627"> JSON</xref> document that resides in an
        /uma-configuration directory at at its hostmeta <xref
        target="RFC6415"></xref> location. The configuration data documents
        major conformance options supported by the authorization server
        (described further in <xref target="conformance"></xref>) and
        protection and authorization API endpoints (as described in <xref
        target="endpoint-discussion"></xref>). (At the appropriate time, this
        section will instead profile or extend the <xref
        target="OAuth-linktypes"></xref> specification.)</t>

        <t>The configuration data has the following properties. All endpoint
        URIs supplied SHOULD require the use of a transport-layer security
        mechanism such as TLS.<list hangIndent="6" style="hanging">
            <t hangText="version"><vspace />REQUIRED. The version of the UMA
            core protocol to which this authorization server conforms. The
            value MUST be the string "1.0".</t>

            <t hangText="issuer"><vspace />REQUIRED. A URI indicating the
            party operating the authorization server.</t>

            <t hangText="dynamic_client_endpoint"><vspace />OPTIONAL. The
            endpoint to use for performing dynamic client registration through
            <xref target="DynClientReg">.</xref></t>

            <t hangText="oauth_token_profiles_supported"><vspace />REQUIRED.
            PAT and AAT profiles produced by this authorization server. The
            property value is an array of string values. Currently the only
            string value for this property defined by this specification is
            "bearer", corresponding to the OAuth bearer token profile <xref
            target="OAuth-bearer"></xref>. The authorization server is
            REQUIRED to support this profile, and to supply this string value
            explicitly. The authorization server MAY declare its support for
            additional access token profiles by providing a unique absolute
            URI in a string value in the array for each one.</t>

            <t hangText="uma_token_profiles_supported"><vspace />REQUIRED. RPT
            types produced by this authorization server. The property value is
            an array of string values. Currently the only string value for
            this property defined by this specification is "bearer", whose
            associations the resource server MUST determine through a token
            introspection interaction with the authorization server (see <xref
            target="h-am-rpt-status"></xref> for the definition of this
            profile). The authorization server is REQUIRED to support the UMA
            bearer token profile, and to supply this string value explicitly.
            The authorization server MAY declare its support for RPTs using
            additional UMA token profiles by providing a unique absolute URI
            in a string value in the array for each one.</t>

            <t hangText="oauth_grant_types_supported"><vspace />REQUIRED.
            OAuth grant types supported by this authorization server in
            issuing PATs and AATs. The property value is an array of string
            values. Each string value MUST be one of the grant_type values
            defined in <xref target="OAuth2"></xref>, or alternatively an
            extension grant type indicated by a unique absolute URI.</t>

            <t hangText="claim_profiles_supported"><vspace />OPTIONAL. Claim
            formats and associated sub-protocols for gathering claims from
            requesting parties, as supported by this authorization server. The
            property value is an array of string values. Currently the only
            string value for this property defined by this specification is
            "openid", for which details are supplied in <xref
            target="trusted-claims"></xref>. The authorization server MAY
            declare its support for additional claim profiles by assigning a
            unique absolute URI in a string value in the array for each
            one.</t>

            <t hangText="token_endpoint"><vspace />REQUIRED. The endpoint URI
            at which the resource server or client asks the authorization
            server for a PAT or AAT, respectively. A requested scope of
            "http://docs.kantarainitiative.org/uma/scopes/prot.json" results
            in a PAT. A requested scope of
            "http://docs.kantarainitiative.org/uma/scopes/authorization"
            results in an AAT. Available HTTP methods are as defined by <xref
            target="OAuth2"></xref> for a token endpoint.</t>

            <t hangText="user_endpoint"><vspace />REQUIRED. The endpoint URI
            at which the resource server gathers the consent of the end-user
            resource owner or the client gathers the consent of the end-user
            requesting party, if the "authorization_code" grant type is used.
            Available HTTP methods are as defined by <xref
            target="OAuth2"></xref> for an end-user authorization
            endpoint.</t>

            <t hangText="permission_registration_endpoint"><vspace />REQUIRED.
            The endpoint URI at which the resource server registers
            permissions with the authorization server for which a client will
            be seeking authorization on its requesting party's behalf (see
            <xref target="h-am-register-permission"></xref>). A PAT MUST
            accompany requests to this protected endpoint.</t>

            <t hangText="rpt_endpoint"><vspace />REQUIRED. The endpoint URI at
            which the client ask the authorization server for an RPT. An AAT
            token MUST accompany requests to this protected endpoint.</t>

            <t hangText="rpt_status_endpoint"><vspace />REQUIRED. The endpoint
            URI at which the resource server introspects an RPT presented to
            it by a client (see <xref target="h-am-rpt-status"></xref>). A PAT
            MUST accompany requests to this protected endpoint.</t>

            <t hangText="permission_request_endpoint"><vspace />REQUIRED. The
            endpoint URI at which the client asks, on its requesting party's
            behalf, to have authorization data associated with its RPT. An AAT
            MUST accompany requests to this protected endpoint.</t>
          </list></t>

        <figure>
          <preamble>Example of authorization server configuration data that
          resides at https://example.com/.well-known/uma-configuration (note
          the use of https: for endpoints throughout):</preamble>

          <artwork><![CDATA[{
"version":"1.0",
"issuer":"https://example.com",
"dynamic_client_endpoint":"https://as.example.com/dyn_client_reg_uri",
"oauth_token_profiles_supported":[
  "bearer"
],
"uma_token_profiles_supported":[
  "bearer"
],
"oauth_grant_types_supported":[
  "authorization_code"
],
"claim_profiles_supported":[
  "openid"
],
"token_endpoint":"https://as.example.com/token_uri",
"user_endpoint":"https://as.example.com/user_uri",
"resource_set_registration_endpoint":"https://as.example.com/rs/rsrc_uri",
"rpt_status_endpoint":"https://as.example.com/rs/status_uri",
"permission_registration_endpoint":"https://as.example.com/rs/perm_uri",
"rpt_endpoint":"https://as.example.com/client/rpt_uri",
"permission_request_endpoint":"https://as.example.com/client/perm_uri"
}]]></artwork>
        </figure>

        <t>Authorization server configuration data MAY contain extension
        properties that are not defined in this specification. Extension names
        that are unprotected from collisions are outside the scope of the
        current specification.</t>
      </section>
    </section>

    <section anchor="protecting-a-resource" title="Protecting a Resource">
      <t>Phase 1 of UMA is protecting a resource. The resource owner, resource
      server, and authorization server perform the following steps to
      successfully complete Phase 1 (assuming that the resource server has
      discovered the authorization server's configuration data and endpoints
      as needed):<list style="symbols">
          <t>The resource server and authorization server establish mutual
          trust through the issuance of client credentials to the resource
          server. It is OPTIONAL for the client credentials to be provided
          dynamically through <xref target="DynClientReg"></xref>);
          alternatively, they MAY use a static process.</t>

          <t>The resource owner, resource server, and authorization server
          establish three-way trust through the issuance of a PAT. See <xref
          target="host-access-token"></xref> for additional details.</t>

          <t>The resource server registers any resource sets with the
          authorization server that are intended to be protected. See <xref
          target="resource-set-reg"></xref> for additional details.</t>
        </list></t>

      <section anchor="host-access-token"
               title="Resource Server Obtains Protection API Token">
        <t>In this step, the resource server acquires a PAT from the
        authorization server. The token represents the approval of the
        resource owner for this resource server to trust this authorization
        server for protecting resources belonging to this resource owner. It
        is OPTIONAL for the resource owner to introduce the resource server to
        the authorization server dynamically through the process defined in
        <xref target="OAuth-resource-reg"></xref>); alternatively, they MAY
        use a static process that may or may not directly involve the resource
        owner at introduction time.</t>

        <t>The resource server MUST use OAuth 2.0 <xref
        target="OAuth2"></xref> to obtain the PAT. Here the resource server
        acts in the role of an OAuth client requesting the
        "http://docs.kantarainitiative.org/uma/scopes/prot.json" scope, which
        authorizes it to use the authorization server's resource set
        registration endpoint (as defined in <xref
        target="OAuth-resource-reg"></xref>) as well as additional protection
        API endpoints. Once the resource server has obtained its PAT, it
        presents it to the authorization server at various protection API
        endpoints.</t>

        <t>(NOTE: The "http://docs.kantarainitiative.org/uma/scopes/prot.json"
        scope keyword is a URI that resolves to a JSON-encoded scope
        description, in the fashion of UMA scope types. This scope description
        is non-normative.)</t>

        <t>The authorization server MAY support the use of any OAuth grant
        type for PAT issuance, but MUST support the authorization_code grant
        type, and SHOULD support the SAML bearer token grant type <xref
        target="OAuth-SAML"></xref>
        (urn:ietf:params:oauth:grant-type:saml2-bearer) if it anticipates
        working with resource servers that are operating in environments where
        the use of SAML is prevalent. The authorization server MUST indicate
        all grant types it supports for PAT issuance in its configuration
        data.</t>
      </section>

      <section anchor="resource-set-reg"
               title="Resource Server Registers Sets of Resources to Be Protected">
        <t>Once the resource server has received a PAT, for any of the
        resource owner's sets of resources that are to be protected by this
        authorization server, it registers these resource sets in a timely
        fashion. To do this, the resource server uses the resource set
        registration API defined in <xref
        target="OAuth-resource-reg"></xref>.</t>

        <t>Note: The resource server is free to offer the option to protect
        any subset of the resource owner's resources using different
        authorization servers or other means entirely, or to protect some
        resources and not others. Additionally, the choice of protection
        regimes can be made explicitly by the resource owner or implicitly by
        the resource server. Any such partitioning by the resource server or
        owner is outside the scope of this specification.</t>

        <t>On successfully registering a resource set, the RS MUST use access
        control mechanisms to limit access to any resources corresponding to
        this resource set, relying on the AS to supply currently valid
        permissions for authorized access. The RS MUST outsource protection to
        the AS according to the currently registered state of a resource set.
        This requirement holds true so long as the RS has one or more
        registsred resource sets.</t>
      </section>
    </section>

    <section anchor="getting-authz-accessing-resource"
             title="Getting Authorization and Accessing a Resource">
      <t>Phase 2 of UMA is getting authorization, and phase 3 is accessing a
      resource. In these phases, an authorization server orchestrates and
      controls clients' access (on their requesting parties' behalf) to a
      resource owner's protected resources at a resource server, under
      conditions dictated by that resource owner.</t>

      <t>Phase 3 is merely the successful completion of a client's access
      attempt that initially involved several embedded interactions among the
      client, requesting party, authorization server, and resource server in
      phase 2. Phase 2 always begins with the client attempting access at a
      protected resource endpoint at the resource server. How the client came
      to learn about this endpoint is out of scope for this specification. The
      resource owner might, for example, have advertised its availability
      publicly on a blog or other website, listed it in a discovery service,
      or emailed a link to a particular intended requesting party.</t>

      <t>The resource server responds to the client's access request in one of
      several ways depending on the circumstances of the request, either
      immediately or having first performed one or more embedded interactions
      with the authorization server. Depending on the nature of the resource
      server's response to an failed access attempt, the client and its
      operator engage in embedded interactions with the authorization server
      before re-attempting access.</t>

      <t>The interactions are as follows. Each interaction MAY be the last, if
      the client chooses not to continue pursuing the access attempt or the
      resource server chooses not to continue facilitating it.<list
          style="numbers">
          <t>The client attempts access at a particular protected resource at
          a resource server (see <xref
          target="r-h-attempt-access"></xref>).<list style="letters">
              <t>If the access attempt is unaccompanied by an RPT, the
              resource server responds immediately with an HTTP 401
              (Unauthorized) response and instructions on where to go to
              obtain one (see <xref
              target="authz-permission-token"></xref>).</t>

              <t>If the access attempt was accompanied by an RPT, the resource
              server checks the RPT's status (see <xref
              target="h-am-rpt-status"></xref>).<list style="numbers">
                  <t>If the RPT is invalid (for example, it is not applicable
                  to this resource server), the resource server responds to
                  the client with an HTTP 401 (Unauthorized) response and
                  instructions on where to go to obtain a token (see <xref
                  target="authz-permission-token"></xref>).</t>

                  <t>If the RPT is valid but has insufficient permission, the
                  resource server registers a suitable permission request on
                  the client's behalf at the authorization server (see <xref
                  target="h-am-register-permission"> </xref>), and then
                  responds to the client with an HTTP 403 (Forbidden) response
                  and instructions on where to go to ask for authorization
                  (see <xref target="insufficient-rpt"></xref>).</t>

                  <t>If the RPT is valid, and if the authorization data
                  associated with the token is consistent with allowing
                  access, the resource server responds to the client's access
                  attempt with an HTTP 200 (OK) response and a representation
                  of the resource (see <xref
                  target="sufficient-rpt"></xref>).</t>
                </list></t>
            </list></t>

          <t>If the client (possessing no RPT or an invalid RPT) received a
          401 response and an RPT endpoint, it then requests an RPT from that
          endpoint (see <xref target="authz-permission-token"></xref>).</t>

          <t>If the client (posessing a valid RPT) received a 403 response and
          a permission ticket, it then asks the authorization server for
          authorization that matches the ticket (<xref
          target="r-am-authz-scope"></xref>). If the authorization server
          needs requesting party claims in order to assess this client's
          authorization, it engages in a claims-gathering flow with the
          requesting party (see <xref target="authz-flows"></xref>).<list
              style="letters">
              <t>If the client does not already have an AAT at the appropriate
              authorization server to be able to use its permission request
              endpoint, it first obtains one (see <xref
              target="authz-api-token"></xref>).</t>
            </list></t>
        </list></t>

      <t>The interactions are described in detail in the following
      sections.</t>

      <section anchor="r-h-attempt-access"
               title="Client Attempts to Access Protected Resource at Resource Server">
        <t>This interaction assumes that the resource server has previously
        registered with an authorization server one or more resource sets that
        correspond to the resource to which access is being attempted, such
        that the resource server considers this resource to be protected by a
        particular authorization server.</t>

        <t>The client typically attempts to access the desired resource at the
        resource server directly (for example, when an end-user requesting
        party clicks on a thumbnail representation of the resource). The
        client is expected to discover, or be provisioned or configured with,
        knowledge of the protected resource and its location out of band.
        Further, the client is expected to acquire its own knowledge about the
        application-specific methods made available by the resource server for
        operating on this protected resource (such as viewing it with a GET
        method, or transforming it with some complex API call) and the
        possible scopes of access.</t>

        <figure>
          <preamble>Example of a request carrying no RPT:</preamble>

          <artwork><![CDATA[
GET /album/photo.jpg HTTP/1.1
Host: photoz.example.com
...
]]></artwork>
        </figure>

        <figure>
          <preamble>Example of a request carrying an RPT using the UMA
          "bearer" token profile:</preamble>

          <artwork><![CDATA[
GET /album/photo.jpg HTTP/1.1
Authorization: Bearer vF9dft4qmT
Host: photoz.example.com
...
]]></artwork>
        </figure>

        <t>The resource server responds in one of the following ways.</t>

        <section anchor="no-rpt"
                 title="Client Presents No Requester Permission Token">
          <t>If the client does not present any access token with the request,
          the resource server MUST return an HTTP 401 (Unauthorized) status
          code, along with providing the authorization server's URI in an
          "am_uri" property to facilitate authorization server configuration
          data discovery, including discovery of the endpoint where the client
          can request an RPT (<xref
          target="authz-permission-token"></xref>).</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 401 Unauthorized
   WWW-Authenticate: UMA realm="example",
    host_id="photoz.example.com",
    am_uri="http://am.example.com"
   ...
]]></artwork>
          </figure>
        </section>

        <section anchor="insufficient-rpt"
                 title="Client Presents a Requester Permission Token That Has Insufficient Permission">
          <t>If the client presents an RPT with its request, the resource
          server SHOULD determine the RPT's status (see <xref
          target="h-am-rpt-status"></xref>). If the RPT is invalid, the
          resource server redirects the client to the RPT endpoint at the
          authorization server to obtain a correct RPT (see <xref
          target="authz-permission-token"></xref>).</t>

          <t>If the RPT is valid but has insufficient permission for the type
          of access sought, the resource server SHOULD register a permission
          with the authorization server that would suffice for that scope of
          access (see <xref target="h-am-register-permission"></xref>), and
          then respond to the client with the HTTP 403 (Forbidden) status
          code, along with providing the authorization server's URI in the
          header of the message and the permission ticket it just received
          from the authorization server in the body in JSON form.</t>

          <figure>
            <preamble>Example of the host's response:</preamble>

            <artwork><![CDATA[
HTTP/1.1 403 Forbidden
WWW-Authenticate: UMA realm="example",
  host_id="photoz.example.com",
  am_uri="http://am.example.com"
  error="insufficient_scope"

{
"ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
}
]]></artwork>
          </figure>
        </section>

        <section anchor="sufficient-rpt"
                 title="Client Presents a Valid Requester Permission Token with Sufficient Permissions">
          <t>If the RPT's status is associated with authorization data that is
          consistent with authorized access of the scope sought by the client
          (see <xref target="h-am-rpt-status"></xref>), the resource server
          MUST give access to the desired resource.</t>

          <figure>
            <preamble>Example of the resource server's response:</preamble>

            <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: image/jpeg
...

/9j/4AAQSkZJRgABAgAAZABkAAD/7AARRHVja
3kAAQAEAAAAPAAA/+4ADkFkb2JlAGTAAAAAAf
/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAo
KCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwb
]]></artwork>
          </figure>

          <t>This response constitutes the conclusion of [hase 3 of UMA.</t>

          <t>The resource server MUST NOT give access where the token's status
          is not associated with sufficient authorization data for the
          attempted scope of access.</t>
        </section>
      </section>

      <section anchor="h-am-register-permission"
               title="Resource Server Registers a Permission With Authorization Server">
        <t>In response to receiving an access request accompanied by an RPT
        that is invalid or has insufficient permissions, the resource server
        SHOULD register a permission with the authorization server that would
        be sufficient for the type of access sought. The authorization server
        returns a permission ticket for the resource server to give to the
        client in its response.</t>

        <t>The permission ticket is a short-lived opaque structure whose form
        is determined by the authorization server. The ticket value MUST be
        securely random (for example, not merely part of a predictable
        sequential series), to avoid denial-of-service attacks. Since the
        ticket is an opaque structure from the point of view of the client,
        the authorization server is free to include information regarding
        expiration time within the opaque ticket for its own consumption. When
        the client subsequently asks the authorization server for
        authorization data to be associated with its RPT, it will submit this
        ticket to the authorization server.</t>

        <t>The resource server registers the permission using the POST method
        at the authorization server's permission registration endpoint. The
        resource server MUST provide its valid PAT in order to get access to
        this endpoint. The body of the HTTP request message contains a JSON
        document providing the requested permission.</t>

        <t>The requested scope is an object with the name
        "requested_permission" and the following properties:<list
            style="hanging">
            <t hangText="resource_set_id">REQUIRED. The identifier for a
            resource set, access to which this client is seeking access. The
            identifier MUST correspond to a resource set that was previously
            registered.</t>

            <t hangText="scopes">REQUIRED. An array referencing one or more
            identifiers of scope types to which access is needed for this
            resource set. Each scope type identifier MUST correspond to a
            scope type that was registered by this resource server for the
            referenced resource set.</t>
          </list></t>

        <figure>
          <preamble>Example of an HTTP request that registers a permission at
          the authorization server's permission registration
          endpoint:</preamble>

          <artwork><![CDATA[
POST /host/scope_reg_uri/photoz.example.com HTTP/1.1
Content-Type: application/json
Host: am.example.com

{
  "resource_set_id": "112210f47de98100",
  "scopes": [
      "http://photoz.example.com/dev/actions/view",
      "http://photoz.example.com/dev/actions/all"
  ]
}
]]></artwork>
        </figure>

        <t>If the registration request is successful, the authorization server
        responds with an HTTP 201 (Created) status code and includes the
        Location header in its response as well as the "ticket" property in
        the JSON-formatted body.</t>

        <figure>
          <preamble>For example:</preamble>

          <artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/uma-permission-ticket+json
Location: https://am.example.com/permreg/host/photoz.example.com/5454345rdsaa4543
...

{
"ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
}
]]></artwork>
        </figure>

        <t>If the registration request is authenticated properly but fails due
        to other reasons, the authorization server responds with an HTTP 400
        (Bad Request) status code and includes one of the following UMA error
        codes (see <xref target="uma-error-response"></xref>):<list
            style="hanging">
            <t hangText="invalid_resource_set_id">The provided resource set
            identifier was not found at the authorization server.</t>

            <t hangText="invalid_scope">At least one of the scopes included in
            the request was not registered previously by this resource
            server.</t>
          </list></t>
      </section>

      <section anchor="h-am-rpt-status"
               title="Resource Server Determines the Requester Permission Token Status">
        <t>On receiving an RPT, the resource server MUST ascertain its status
        before granting or denying access to the client. An RPT is associated
        with a set of authorization data that governs whether the client is
        authorized for access. The token's nature and format are dictated by
        its profile; the profile might allow it to be self-contained, such
        that the resource server is able to ascertain its status locally, or
        might require or allow the resource server to make a run-time
        introspection request of the authorization server that issued the
        token using <xref target="OAuth-introspection"></xref>.</t>

        <t>This specification makes one type of RPT mandatory to implement:
        the UMA bearer token profile, as defined in <xref
        target="uma-bearer-token-profile"></xref>. Alternate RPT profiles MAY
        define their own unique token formats and MAY require, allow, or
        prohibit use of the token introspection endpoint.</t>

        <section anchor="uma-bearer-token-profile"
                 title="UMA Bearer Token Profile">
          <t>This section defines the format and protocol requirements for the
          UMA bearer token profile. An authorization server MUST support the
          UMA bearer token profile and MUST indicate its support in the
          "uma_token_profiles_supported" property in its configuration data
          (see <xref target="am-endpoints"></xref>).</t>

          <t>On receiving an RPT of the "Bearer" type in an authorization
          header from a client making an access attempt, the resource server
          MUST use the authorization server's token introspection endpoint
          <xref target="OAuth-introspection"></xref> to retrieve the RPT's
          associated authorization data. In order to ask the authorization
          server for an RPT's status, the host makes the request to the
          authorization server with a POST request to the authorization
          server's token introspection endpoint. The body of the HTTP request
          message contains a JSON document providing the RPT. The host MUST
          provide its own PAT in the request in order to gain access to the
          RPT status endpoint.</t>

          <figure>
            <preamble>Example of a request to the RPT status endpoint that
            provides the PAT in the header:</preamble>

            <artwork><![CDATA[
POST /token_status HTTP/1.1
Host: am.example.com
Authorization: Bearer vF9dft4qmT
...

{
  "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
  "resource_set_id": "112210f47de98100",
  "host_id": "photoz.example.com"
}
]]></artwork>
          </figure>

          <t>The authorization server returns the RPT's status in an HTTP
          response using the 200 OK status code, containing a JSON document
          supplying the RPT's associated permissions. The RPT status
          description either contains all of the permissions that are
          currently valid for this RPT or indicates that the RPT is invalid
          (see <xref target="scope-discussion"></xref>). The authorization
          server MAY set a cache period for the returned RPT status
          description that allows the host to reuse it over some period of
          time when it later sees the same RPT.</t>

          <t>The status description for a valid RPT is a JSON array of zero or
          more permission objects, each with the following properties (this
          needs to be synced up with the token introspection spec):<list
              style="hanging">
              <t hangText="resource_set_id">REQUIRED. A string that uniquely
              identifies the resource set, access to which has been granted to
              this client on behalf of this requesting party. The identifier
              MUST correspond to a resource set that was previously registered
              as protected.</t>

              <t hangText="scopes">REQUIRED. An array referencing one or more
              URIs of scopes to which access was granted for this resource
              set. Each scope MUST correspond to a scope that was registered
              by this host for the referenced resource set.</t>

              <t hangText="exp">REQUIRED. An integer representing the
              expiration time on or after which the permission MUST NOT be
              accepted for authorized access. The processing of the exp
              property requires that the current date/time MUST be before the
              expiration date/time listed in the exp claim. Host implementers
              MAY provide for some small leeway, usually no more than a few
              minutes, to account for clock skew.</t>
            </list></t>

          <figure>
            <preamble>Example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-store
...

[
  {
    "resource_set_id": "112210f47de98100",
    "scopes": [
      "http://photoz.example.com/dev/actions/view",
      "http://photoz.example.com/dev/actions/all"
    ],
    "exp": 1300819380
  }
]
]]></artwork>
          </figure>

          <figure>
            <preamble>The token status description for an invalid RPT is a
            JSON structure, as follows.</preamble>

            <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/json
...

{
  "rpt_status": "invalid"
}
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="r-am-obtain-permission"
               title="Client Asks Authorization Server for Requester Permission Token and Permission">
        <t>A client making an access attempt accompanied by no RPT or by an
        invalid RPT will receive a 401 response back from the resource server,
        along with the authorization server's location from which it can learn
        the RPT endpoint. In this case, the client must obtain a valid RPT
        from the authorization server's RPT endpoint provided in the response
        (see <xref target="authz-permission-token"></xref>).</t>

        <t>A client making an access attempt with a valid RPT that has
        insufficient authorization data associated with it will receive a 403
        response back from the resource server, along with a permission ticket
        and the authorization server's location from which it can learn the
        permission request endpoint. In this case, the client uses the
        permission ticket to ask for the necessary authorization data to be
        associated with its RPT. This process necessarily involves the
        requesting party because the authorization is sought on this party's
        behalf.</t>

        <t>The client takes action in the following ways (assuming that it has
        discovered the authorization server's configuration data and endpoints
        as required):<list style="symbols">
            <t>The client and authorization server establish mutual trust
            through the issuance of client credentials to the client. It is
            OPTIONAL for the client credentials to be provided dynamically
            through <xref target="DynClientReg"></xref>); alternatively, they
            MAY use a static process.</t>

            <t>The requesting party, client, and authorization server
            establish three-way trust through the issuance of an AAT. See
            <xref target="authz-api-token"></xref> for additional details.</t>

            <t>The client obtains an RPT. See <xref
            target="authz-permission-token"></xref> for additional
            details.</t>
          </list></t>

        <section anchor="authz-api-token"
                 title="Client Obtains Authorization API Token">
          <t>In this step, the client acquires an AAT from the authorization
          server on the requesting party's behalf. The token represents the
          approval of this requesting party for this client to engage with
          this authorization server to supply claims, ask for authorization,
          and perform any other tasks needed for obtaining authorization for
          access to resources at all resource servers that use this
          authorization server. It is OPTIONAL for the requesting party to
          introduce the client to the authorization server dynamically through
          the process defined in <xref target="OAuth-resource-reg"></xref>);
          alternatively, they MAY use a static process that does not directly
          involve the requesting party.</t>

          <t>The client MUST use OAuth 2.0 <xref target="OAuth2"></xref> to
          obtain the AAT. Here the client requests the
          "http://docs.kantarainitiative.org/uma/scopes/authz.json" scope.
          Once the client has obtained its AAT, it presents it to the
          authorization server at the permission request endpoint.</t>

          <t>(NOTE: The
          "http://docs.kantarainitiative.org/uma/scopes/authz.json" scope
          keyword is a URI that resolves to a JSON-encoded scope description,
          in the fashion of UMA scope types. This scope description is
          non-normative.)</t>

          <t>The authorization server MAY support the use of any OAuth grant
          type for AAT issuance, but MUST support the authorization_code grant
          type, and SHOULD support the SAML bearer token grant type <xref
          target="OAuth-SAML"></xref>
          (urn:ietf:params:oauth:grant-type:saml2-bearer) if it anticipates
          working with clients that are operating in environments where the
          use of SAML is prevalent. The authorization server MUST indicate all
          grant types it supports for AAT issuance in its configuration
          data.</t>

          <t>By virtue of being able to identify this client/requesting party
          pair uniquely across all resource servers whose resources it
          protects, the authorization server is able to manage the process of
          authorization and claims-gathering efficiently. These management
          processes are outside the scope of this specification.</t>
        </section>

        <section anchor="authz-permission-token"
                 title="Client Obtains Requester Permission Token">
          <t>In this step, if the client needs an RPT that applies to this
          requesting party for this resource server and this authorization
          server, it obtains an RPT. On first issuance the RPT is associated
          with no authorization data and thus does not convey any
          authorizations for access.</t>

          <t>The clieint performs a POST on the RPT endpoint. It MUST provide
          its own AAT in the header.</t>

          <figure>
            <preamble>Example of a request message containing an
            AAT:</preamble>

            <artwork><![CDATA[POST /rpt HTTP/1.1
Host: am.example.com
Authorization: Bearer jwfLG53^sad$#f
...
]]></artwork>
          </figure>

          <t>The authorization server responds with an HTTP 201 (Created)
          status code and provides a new RPT.</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 201 Created
Content-Type: application/uma-rpt+json

{
  "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv"
}
]]></artwork>
          </figure>

          <t>If the content-type of the request is not recognized by the
          authorization server, the latter MUST produce an HTTP error.</t>

          <t>The client might need an RPT if it has never before requested an
          RPT for this combination of requesting party, resource server, and
          authorization server, or if it has lost control of a previously
          issued RPT and needs a refreshed one. If the AAT provided in the
          header is the same as one provided for a previously issued RPT by
          this authorization server, the authorization server invalidates the
          old RPT and issues a new one.</t>

          <t>If the request fails due to missing or invalid parameters, or is
          otherwise malformed, the authorization server SHOULD inform the
          client of the error by sending an HTTP error response.</t>

          <t>If the request fails due to an invalid, missing, or expired AAT
          or requires higher privileges at this endpoint than provided by the
          AAT, the authorization server responds with an OAuth error (see
          <xref target="oauth-error-response"></xref>).</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
  error="invalid_token",
  error_description="The access token expired"
]]></artwork>
          </figure>
        </section>

        <section anchor="r-am-authz-scope"
                 title="Client Asks for Authorization">
          <t>Once in possession of an AAT for this authorization server, an
          RPT that applies to this requesting party for this resource server
          and this authorization server, and a permission ticket, the client
          asks the authorization server to give it suitable authorization data
          for the sought-for access. The client performs a POST on the
          permission request endpoint, supplying the items below. The client
          MUST provide its own AAT in the header. <list style="symbols">
              <t>The permission ticket it received from the resource
              server</t>

              <t>Its RPT for this resource server</t>

              <t>Its own AAT in the header</t>
            </list></t>

          <figure>
            <preamble>Example of a request message containing a permission
            ticket and RPT:</preamble>

            <artwork><![CDATA[POST /token_status HTTP/1.1
Host: am.example.com
Authorization: Bearer jwfLG53^sad$#f
...

{
 "rpt": "sbjsbhs(/SSJHBSUSSJHVhjsgvhsgvshgsv",
 "ticket": "016f84e8-f9b9-11e0-bd6f-0021cc6004de"
}]]></artwork>
          </figure>

          <t>In this interaction, the client uses the authorization server's
          permission request endpoint. The authorization server uses the
          ticket to look up the details of the previously registered
          permission, maps the requested permission to operative user
          policies, undergoes any authorization flows required (see <xref
          target="authz-flows"></xref>), and ultimately responds to the
          request positively or negatively.</t>

          <t>If the request fails due to an invalid, missing, or expired AAT
          (or RPT) or requires higher privileges at this endpoint than
          provided by the AAT, the authorization server responds with an OAuth
          error (see <xref target="oauth-error-response"></xref>).</t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 401 Unauthorized
WWW-Authenticate: Bearer realm="example",
  error="invalid_token",
  error_description="The access token expired"
]]></artwork>
          </figure>

          <t>If the authorization server does not add the requested
          authorization data, it responds using the appropriate HTTP status
          code (typically 400 or 403), and includes one of the following error
          codes in the response (see <xref
          target="uma-error-response"></xref>): <list style="hanging">
              <t hangText="invalid_requester_ticket">The provided ticket was
              not found at the authorization server. The authorization server
              SHOULD respond with the HTTP 400 (Bad Request) status code.</t>

              <t hangText="expired_requester_ticket">The provided ticket has
              expired. The authorization server SHOULD respond with the HTTP
              400 (Bad Request) status code.</t>

              <t hangText="not_authorized_permission">The client is
              definitively not authorized for this authorization according to
              user policy. The authorization server SHOULD respond with the
              HTTP 403 (Forbidden) status code.</t>

              <t hangText="need_claims">The authorization server is unable to
              determine whether the client is authorized for this permission
              without gathering claims from the requesting party. The
              authorization server SHOULD respond with the HTTP 403
              (Forbidden) status code. The client is therefore not authorized,
              but has the opportunity to engage its operator -- the requesting
              party -- in a claims-gathering flow with the authorization
              server (see <xref target="authz-flows"></xref>) to potentially
              become authorized.</t>
            </list></t>

          <figure>
            <preamble>For example:</preamble>

            <artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/uma-status+json
Cache-Control: no-store
...

{
  "status": "error",
  "error": "expired_requester_ticket"
}
]]></artwork>
          </figure>
        </section>
      </section>

      <section anchor="authz-flows" title="Claims-Gathering Flows">
        <t>The authorization server MUST base the addition of authorization
        data to RPTs on user policies. The nature of these policies is outside
        the scope of UMA, but generally speaking, they can be thought of as
        either independent of requesting-party features (for example, time of
        day) or dependent on requesting-party features (for example, whether
        they are over 18). This latter case requires the requesting party to
        transmit identity claims to the AM in some fashion.</t>

        <t>The process for requesting and providing claims is extensible and
        may have a variety of dependencies on the type of requesting party
        (for example, natural person or legal person) and the type of client
        (for example, browser, native app, or autonomously running web
        service). UMA provides a framework for handling end-user-driven
        clients and an optional solution for gathering standardized claims
        from such an end-user, and allows for extensions to support other
        solutions for this use case and other use cases. The authorization
        server SHOULD document its claims-handling ability in its
        configuration data through the claim_profiles_supported property (see
        <xref target="am-endpoints"></xref>). For the business-level and legal
        implications of different technical authorization flows, see <xref
        target="UMA-obligations"></xref>.</t>

        <section anchor="trusted-claims-human-driven"
                 title="Claims-Gathering Flow for Clients Operated by End-Users">
          <t>A client, whether web-based or native, is operated by an end-user
          in one of two typical situations:<list style="symbols">
              <t>The requesting party is a natural person (for example, a
              friend of the resource owner); the requesting party may even be
              the resource owner herself.</t>

              <t>The requesting party is a legal person such as a corporation,
              and the end-user operating the client is acting as an agent of
              that legal person (for example, a customer support specialist
              representing a credit card company).</t>
            </list></t>

          <t>For convenience, this specification refers to the end-user as a
          "requesting end-user" to cover both cases, which differ only at the
          level of business agreements (and potentially law), rather than
          technology. The authorization server has a variety of options at
          this point for satisfying the resource owner's policy; this
          specification does not dictate a single answer. For example, the
          authorization server could require the requesting end-user to
          register for and/or log in to a local authorization server account,
          or to fill in a questionnaire, or to complete a purchase. It could
          even require several of these operations, where the order is treated
          as significant. A variety of claim profiling can be defined to
          achieve these effects.</t>

          <t>An end-user-driven client MUST redirect the requesting end-user
          to the authorization server to complete the process of
          authorization. The redirection MUST include a URI query parameter
          with the name "ticket" whose value conveys the permission ticket for
          which the need_claims error was received; for example,
          "ticket=016f84e8-f9b9-11e0-bd6f-0021cc6004de". Each claim profile
          MUST provide the following capabilities:<list style="hanging">
              <t hangText="redirect URI">A means by which the client MUST
              supply the URI to which the authorization server MUST redirect
              the requesting end-user at the end of the claims-gathering
              process.</t>

              <t hangText="callback URI">A means by which the client
              OPTIONALLY supplies a callback URI for the authorization server
              to use.</t>

              <t hangText="state">A means by which the client SHOULD supply an
              opaque value used to maintain state between the request and the
              callback; this serves as a protection against XSRF attacks.</t>
            </list></t>

          <t>An authorization server MAY support any number of claim profiles.
          One potential such profile is defined in this specification: the
          "openid" claim profile, which leverages OpenID Connect for gathering
          generally useful identity claims (see <xref
          target="trusted-claims"></xref>).</t>

          <section anchor="trusted-claims"
                   title="UMA OpenID Connect Claim Profile">
            <t>This section defines the UMA OpenID Connect claim profile.
            Following is a summary:<list style="symbols">
                <t>Identifying URI:
                http://docs.kantarainitiative.org/uma/profiles/uma-claim-openid-1.0</t>

                <t>Profile author and contact information: Thomas Hardjono
                (hardjono@mit.edu)</t>

                <t>Updates or obsoletes: None; this profile is new.</t>

                <t>Authorization server configuration data: To indicate
                support, supply the keyword "openid" in the
                "claim_profiles_supported" property value.</t>

                <t>Syntax and semantics of claim data: As defined below. The
                claim data format leverages the OpenID Connect protocol and
                the reserved claims defined in that specification.</t>

                <t>Claims gathering method: As defined below.</t>

                <t>Error states: None additional.</t>

                <t>Security and privacy considerations: None additional.</t>

                <t>Binding obligations: Binding obligations that apply to the
                use of this claim profile are documented in <xref
                target="UMA-obligations"></xref>.</t>
              </list></t>

            <t>If an authorization server supports the OpenID Connect claim
            profile, it MUST supply the "openid" value for one of its
            "claim_profiles_supported" values in its configuration data.</t>

            <t>To conform to this option, the authorization server MUST do the
            following:<list style="symbols">
                <t>Serve as a conforming OpenID Relying Party and Claims
                Client according to <xref target="OCStandard"></xref></t>

                <t>Be able to utilize at least all of the reserved claims
                defined in <xref target="OCMessages"></xref> in assessing
                policy and granting permissions</t>

                <t>Use the OpenID Connect "redirect_uri" and "state" request
                parameters as appropriate</t>
              </list></t>

            <t>The authorization server can then use any conforming OpenID
            Connect mechanisms and typical user interfaces for engaging with
            the UserInfo endpoints of OpenID Providers and Claims Providers,
            potentially allowing for the delivery of "trusted claims" (such as
            a verified email address or a date or birth) on which
            authorization policy may depend.</t>
          </section>
        </section>
      </section>
    </section>

    <section anchor="errors" title="Error Messages">
      <t>Ultimately the resource server is responsible for either granting the
      access the client attempted, or returning an error response to the
      client with a reason for the failure. <xref target="OAuth2"></xref>
      defines several error responses for a resource server to return. UMA
      makes use of these error responses, but requires the resource server to
      "outsource" the determination of some error conditions to the
      authorization server. UMA defines its own additional error responses
      that the authorization server may give to the resource server and client
      as they interact with it, and that the resource server may give to the
      client.</t>

      <section anchor="oauth-error-response" title="OAuth Error Responses">
        <t>When a resource server or client attempts to access one of the
        authorization server endpoints <xref target="am-endpoints"></xref> or
        a client attempts to access a protected resource at the resource
        server, it has to make an authenticated request by including an OAuth
        access token in the HTTP request as described in <xref
        target="OAuth2"></xref> Section 7.</t>

        <t>If the request failed authentication, the authorization server or
        the resource server responds with an OAuth error message as described
        throughout <xref target="protecting-a-resource"></xref> and <xref
        target="getting-authz-accessing-resource"></xref>.</t>
      </section>

      <section anchor="uma-error-response" title="UMA Error Responses">
        <t>When a resource server or client attempts to access one of the
        authorization server endpoints <xref target="am-endpoints"></xref> or
        a client attempts to access a protected resource at the resource
        server, if the request is successfully authenticated by OAuth means,
        but is invalid for another reason, the authorization server or
        resource server responds with an UMA error response by adding the
        following properties to the entity body of the HTTP response: <list
            style="hanging">
            <t hangText="error">REQUIRED. A single error code. Value for this
            property is defined in the specific authorization server endpoint
            description.</t>

            <t hangText="error_description">OPTIONAL. Human-readable text
            providing additional information, used to assist in the
            understanding and resolution of the error occurred.</t>

            <t hangText="error_uri">OPTIONAL. A URI identifying a
            human-readable web page with information about the error, used to
            provide the end-user with additional information about the
            error.</t>
          </list></t>

        <t>Common error codes: <list style="hanging">
            <t hangText="invalid_request">The request is missing a required
            parameter or is otherwise malformed. The authorization server MUST
            respond with the HTTP 400 (Bad Request) status code.</t>
          </list></t>

        <figure>
          <preamble>For example:</preamble>

          <artwork><![CDATA[
HTTP/1.1 400 Bad Request
Content-Type: application/uma-status+json
Cache-Control: no-store
...

{
  "status": "error",
  "error": "invalid_request",
  "error_description": "There is already a resource with this identifier.",
  "error_uri": "http://am.example.com/errors/resource_exists"
}
]]></artwork>
        </figure>
      </section>
    </section>

    <section anchor="profiles" title="Specification of Additional Profiles">
      <t>This specification defines a protocol that has optional features in
      it. For interoperability and deployment purposes to serve particular use
      cases, third parties may want to define profiles of the UMA core
      protocol that restrict these options.</t>

      <t>Further, this specification has two modular and extensible elements
      of its design that are specified in terms of specific kinds of
      profiles:<list style="symbols">
          <t>RPT token formats and associated sub-protocol flows: These are
          specified in terms of UMA token profiles.</t>

          <t>Claims-gathering sub-protocol flows and specific claim types:
          These are specified in terms of UMA claim profiles.</t>
        </list></t>

      <t>Likewise, third parties may want to define additional token and claim
      profiles to achieve interoperability and deployment success for
      particular use cases. It is not practical for this specification to
      standardize all of these additional profiles. However, to serve overall
      interoperability goals, the following sections provide guidelines for
      third parties that wish to specify UMA profiles.</t>

      <section title="Specifying UMA Profiles">
        <t>It is STRONGLY RECOMMENDED that UMA profiles document the following
        information:</t>

        <t><list style="numbers">
            <t>Specify a URI that uniquely identifies the profile.</t>

            <t>Identify the responsible author and provide postal or
            electronic contact information.</t>

            <t>Supply references to previously defined profiles that the
            profile updates or obsoletes.</t>

            <t>Specify relevant authorization server configuration data
            defined and/or utilized by the profile.</t>

            <t>Specify the set of interactions between endpoint entites
            involved in the profile, calling out any restrictions on ordinary
            UMA-conformant operations and any extension properties used in
            message formats.</t>

            <t>Identify the legally responsible parties involved in each
            interaction and any new obligations imposed, in the fashion of
            <xref target="UMA-obligations"></xref>.</t>

            <t>Define any additional or changed error states.</t>

            <t>Supply any additional security and privacy considerations,
            including analysis of threats and description of
            countermeasures.</t>
          </list></t>
      </section>

      <section title="Specifying UMA Token Profiles">
        <t>It is STRONGLY RECOMMENDED that UMA token profiles document the
        following information:</t>

        <t><list style="numbers">
            <t>Specify a URI that uniquely identifies the token profile.</t>

            <t>Identify the responsible author and provide postal or
            electronic contact information.</t>

            <t>Supply references to previously defined token profiles that the
            token profile updates or obsoletes.</t>

            <t>Specify the keyword to be used in HTTP Authorization headers
            with tokens conforming to this profile.</t>

            <t>Specify relevant authorization server configuration data
            defined and/or utilized by the token profile. At a minimum,
            specify the keyword for an authorization server to supply in the
            value of the "uma_token_profiles_supported" property to advertise
            its support for this token profile.</t>

            <t>Specify the syntax and semantics of the data that the
            authorization server associates with the token.</t>

            <t>Specify how the token data is associated with, contained
            within, and/or retrieved by means of, the on-the-wire token
            string.</t>

            <t>Specify processing rules for token data.</t>

            <t>Identify any restrictions on grant types to be used with the
            token profile.</t>

            <t>Define any additional or changed error states.</t>

            <t>Supply any additional security and privacy considerations.</t>

            <t>Specify any obligations specific to the token profile, in the
            fashion of <xref target="UMA-obligations"></xref>.</t>
          </list></t>

        <t>See <xref target="uma-bearer-token-profile"></xref> for an
        example.</t>
      </section>

      <section title="Specifying UMA Claim Profiles">
        <t>It is STRONGLY RECOMMENDED that UMA claim profiles document the
        following information:<list style="numbers">
            <t>Specify a URI that uniquely identifies the claim profile.</t>

            <t>Identify the responsible author and provide postal or
            electronic contact information.</t>

            <t>Supply references to previously defined claim profiles that the
            claim profile updates or obsoletes.</t>

            <t>Specify relevant authorization server configuration data
            defined and/or utilized by the claim profile. At a minimum,
            specify the keyword for an authorization server to supply in the
            value of the "claim_profiles_supported" property to advertise its
            support for this claim profile.</t>

            <t>Specify the syntax and semantics of claim data and requests for
            claim data.</t>

            <t>Specify how an authorization server gathers the claims.</t>

            <t>Define any additional or changed error states.</t>

            <t>Supply any additional security and privacy considerations.</t>

            <t>Specify any obligations specific to the claim profile, in the
            fashion of <xref target="UMA-obligations"></xref>.</t>
          </list></t>

        <t>See <xref target="trusted-claims"></xref> for an example.</t>
      </section>
    </section>

    <section title="Security Considerations">
      <t>This specification relies mainly on OAuth security mechanisms for
      protecting the host registration endpoint at the authorization server so
      that only a properly authorized host can access it on behalf of the
      intended user. For example, the host needs to use a valid protection API
      token (PAT) issued through a user authorization process at the endpoint,
      and the interaction SHOULD take place over TLS. It is expected that the
      host will protect its client secret (if it was issued one) and its PAT,
      particularly if used in "bearer token" fashion.</t>

      <t>In addition, this specification dictates a binding between the PAT
      and the host-specific registration area on the authorization server to
      prevent a host from interacting with a registration area not its
      own.</t>

      <t>This specification defines a number of JSON-based data formats. As a
      subset of the JavaScript scripting language, JSON data SHOULD be
      consumed through a process that does not dynamically execute it as code,
      to avoid malicious code execution. One way to achieve this is to use a
      JavaScript interpreter rather than the built-in JavaScript eval()
      function.</t>

      <t>For information about the technical, operational, and legal elements
      of trust establishment between UMA entities and parties, which affects
      security considerations, see <xref target="UMA-obligations"></xref>.</t>
    </section>

    <section title="Privacy Considerations">
      <t>The authorization server comes to be in possession of resource set
      information (such as names and icons) that may reveal information about
      the user, which the authorization server's trust relationship with the
      host is assumed to accommodate. However, the client is a less-trusted
      party (in fact, entirely untrustworthy until it acquires permissions for
      an RPT in UMA protocol phase 2. This specification recommends obscuring
      resource set identifiers in order to avoid leaking personally
      identifiable information to clients through the "scope" mechanism.</t>

      <t>For information about the technical, operational, and legal elements
      of trust establishment between UMA entities and parties, which affects
      privacy considerations, see <xref target="UMA-obligations"></xref>.</t>
    </section>

    <section anchor="conformance" title="Conformance">
      <t>This section outlines conformance requirements for various entities
      implementing UMA endpoints.</t>

      <t>This specification has dependencies on other specifications, as
      follows:<list style="symbols">
          <t>OAuth 2.0: AMs, hosts, and requesters MUST support <xref
          target="OAuth2"></xref> features named in this specification for
          conformance. For example, AMs MUST support the authorization_code
          grant type.</t>

          <t>hostmeta: AMs, hosts, and requesters MUST support the <xref
          target="RFC6415"></xref> features named in this specification.</t>

          <t>OpenID Connect: AMs MAY support <xref
          target="DynClientReg"></xref>, and MAY choose to conform to the
          "openid" claim format option, corresponding to the OpenID Connect RP
          role defined in <xref target="OCStandard"></xref> and support for
          OpenID Connect reserved claims defined in <xref
          target="OCMessages"></xref>.</t>
        </list></t>

      <t>The AM's configuration data provides a machine-readable method for an
      AM to indicate certain of the conformance options it has chosen. Several
      of the data properties allow for extensibility. Where this specification
      does not already require optional features to be documented, it is
      RECOMMENDED that AM developers and deployers document any profiled or
      extended features explicitly and use configuration data to indicate
      their usage. See <xref target="am-endpoints"></xref> for information
      about providing and extending AM configuration data.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>
    </section>

    <section anchor="Acknowledgments" title="Acknowledgments">
      <t>The current editor of this specification is Thomas Hardjono of MIT.
      The following people are co-authors:<list style="symbols">
          <t>Paul C. Bryan, ForgeRock US, Inc. (former editor)</t>

          <t>Domenico Catalano, Oracle Corp.</t>

          <t>George Fletcher, AOL</t>

          <t>Maciej Machulak, Newcastle University</t>

          <t>Eve Maler, XMLgrrl.com</t>

          <t>Lukasz Moren, Newcastle University</t>

          <t>Christian Scholz, COMlounge GmbH (former editor)</t>

          <t>Jacek Szpot, Newcastle University</t>
        </list></t>

      <t>Additional contributors to this specification include the Kantara UMA
      Work Group participants, a list of whom can be found at <xref
      target="UMAnitarians"></xref>.</t>
    </section>

    <section title="Issues">
      <t>All issues are now captured at the project's GitHub site (<eref
      target="https://github.com/xmlgrrl/UMA-Specifications/issues"></eref>).</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>

      <reference anchor="OAuth2"
                 target="http://tools.ietf.org/html/draft-ietf-oauth-v2">
        <front>
          <title>The OAuth 2.0 Protocol</title>

          <author initials="E." surname="Hammer-Lahav">
            <organization>IETF</organization>
          </author>

          <date day="22" month="September" year="2011" />
        </front>
      </reference>

      <reference anchor="OAuth-resource-reg" target="">
        <front>
          <title>OAuth 2.0 Resource Set Registration</title>

          <author initials="T." surname="Hardjono">
            <organization>IETF</organization>
          </author>

          <date day="19" month="December" year="2012" />
        </front>
      </reference>

      <reference anchor="OAuth-introspection"
                 target="http://tools.ietf.org/html/draft-richer-oauth-introspection-00">
        <front>
          <title>OAuth 2.0 Token Introspection</title>

          <author initials="J." surname="Richer">
            <organization>IETF</organization>
          </author>

          <date day="27" month="November" year="2012" />
        </front>
      </reference>

      <reference anchor="OAuth-linktypes"
                 target="https://datatracker.ietf.org/doc/draft-wmills-oauth-lrdd/?include_text=1">
        <front>
          <title>Link Type Registrations for OAuth2</title>

          <author initials="W." surname="Mills">
            <organization>IETF</organization>
          </author>

          <date day="27" month="November" year="2012" />
        </front>
      </reference>

      <reference anchor="OAuth-bearer"
                 target="http://tools.ietf.org/html/rfc6750">
        <front>
          <title>The OAuth 2.0 Authorization Framework: Bearer Token
          Usage</title>

          <author fullname="M. Jones">
            <organization></organization>
          </author>

          <date day="1" month="October" year="2012" />
        </front>
      </reference>

      <reference anchor="OAuth-SAML"
                 target="http://tools.ietf.org/html/draft-ietf-oauth-saml2-bearer">
        <front>
          <title>SAML 2.0 Bearer Assertion Grant Type Profile for OAuth
          2.0</title>

          <author initials="B." surname="Campbell">
            <organization>Campbell</organization>
          </author>

          <date month="August" year="2011" />
        </front>
      </reference>

      <reference anchor="RFC6415" target="http://tools.ietf.org/html/rfc6415">
        <front>
          <title>Web Host Metadata</title>

          <author initials="E." surname="Hammer-Lahav">
            <organization>Yahoo!</organization>
          </author>

          <date day="" month="October" year="2011" />
        </front>
      </reference>

      &RFC4627;

      <reference anchor="DynClientReg"
                 target="https://datatracker.ietf.org/doc/draft-ietf-oauth-dyn-reg/">
        <front>
          <title>OAuth Dynamic Client Registration Protocol</title>

          <author initials="J." surname="Richer">
            <organization>IETF</organization>
          </author>

          <date day="27" month="November" year="2012" />
        </front>
      </reference>

      <reference anchor="OCMessages"
                 target="http://openid.net/specs/openid-connect-messages-1_0.html">
        <front>
          <title>OpenID Connect Messages 1.0</title>

          <author initials="N." surname="Sakimura">
            <organization></organization>
          </author>

          <date day="30" month="September" year="2011" />
        </front>
      </reference>

      <reference anchor="OCStandard"
                 target="http://openid.net/specs/openid-connect-standard-1_0.html">
        <front>
          <title>OpenID Connect Standard 1.0</title>

          <author initials="N." surname="Sakimura">
            <organization></organization>
          </author>

          <date day="30" month="September" year="2011" />
        </front>
      </reference>

      <reference anchor="UMA-obligations"
                 target="http://kantarainitiative.org/confluence/display/uma/UMA+Trust+Model">
        <front>
          <title>Binding Obligations on UMA Participants</title>

          <author initials="E." surname="Maler">
            <organization></organization>
          </author>

          <date day="20" month="April" year="2012" />
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <reference anchor="UMA-usecases"
                 target="http://kantarainitiative.org/confluence/display/uma/UMA+Scenarios+and+Use+Cases">
        <front>
          <title>UMA Scenarios and Use Cases</title>

          <author initials="E." surname="Maler">
            <organization>Kantara</organization>
          </author>

          <date month="October" year="2010" />
        </front>
      </reference>

      <reference anchor="UMA-casestudies"
                 target="http://kantarainitiative.org/confluence/display/uma/Case+Studies">
        <front>
          <title>UMA Case Studies</title>

          <author initials="E." surname="Maler">
            <organization></organization>
          </author>

          <date month="December" year="2012" />
        </front>
      </reference>

      <reference anchor="UMAnitarians"
                 target="http://kantarainitiative.org/confluence/display/uma/Participant+Roster">
        <front>
          <title>UMA Participant Roster</title>

          <author initials="E." surname="Maler">
            <organization>Maler</organization>
          </author>

          <date year="2012" />
        </front>
      </reference>
    </references>

    <section anchor="History" title="Document History">
      <t>NOTE: To be removed by RFC editor before publication as an RFC.</t>

      <t>From I-D rev 03 to rev 04, the following major changes have been
      made:<list style="symbols">
          <t>The requirement to support the client_credentials flow has been
          removed.</t>

          <t>The requester access token has been split into two tokens, and
          all of the tokens have been renamed. The host access token is now
          the PAT. The requester access token used at the AM's API is now the
          AAT, and consists of vanilla OAuth. The requester access token used
          at the host is now the RPT.</t>

          <t>The token and user authorization endpoints for the different APIs
          at the AM have been joined together, and are now distinguished
          through the "http://docs.kantarainitiative.org/uma/scopes/prot.json"
          scope (for the protection API) and the
          "http://docs.kantarainitiative.org/uma/scopes/authz.json" scope (for
          the authorization API).</t>

          <t>The token status description format and JSON media type, and the
          RPT/permission delivery response, have been updated to reflect the
          RPT naming.</t>

          <t>The configuration data format has changed to reflect the changes
          above.</t>

          <t>The Phase 2/3 flow has changed and been simplified to match the
          requirements of the new AAT and RPT.</t>

          <t>Token types are now called token profiles, and this is reflected
          in the configuration parameter names. Claim types are now called
          claim profiles, and this is also reflected in the configuration
          parameter name.</t>

          <t>The requester now asks for permission in a back-channel
          interaction, and the AM now produces a need_claims error that
          instructs the requester to use a claims-gathering flow (renamed from
          "authorization flow").</t>

          <t>Named subsections for token and claim profiles have been added so
          that they show up in the TOC.</t>
        </list></t>

      <t>From I-D rev 04 to rev 05, the following major changes have been
      made:<list style="symbols">
          <t>The RPT-getting flow and the permission-requesting flow have been
          separated back out, with two distinct endpoints, RPT and permission
          request.</t>

          <t>The configuration data format has changed to reflect the changes
          above.</t>
        </list></t>
    </section>
  </back>
</rfc>
